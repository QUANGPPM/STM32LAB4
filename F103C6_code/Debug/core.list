
core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d7c  08002d7c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002d7c  08002d7c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d7c  08002d7c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000080  08002e04  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08002e04  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9c7  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002242  00000000  00000000  0002ba70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002dcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018568  00000000  00000000  0002f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dca3  00000000  00000000  00047720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f8b  00000000  00000000  000553c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db34e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  000db3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d40 	.word	0x08002d40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002d40 	.word	0x08002d40

0800014c <SCH_Init>:

// declare variable:
TaskList list;

// define functions:
void SCH_Init(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	//add code here:
		list.head = NULL;
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <SCH_Init+0x18>)
 8000152:	2200      	movs	r2, #0
 8000154:	601a      	str	r2, [r3, #0]
    list.tail = NULL;
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <SCH_Init+0x18>)
 8000158:	2200      	movs	r2, #0
 800015a:	605a      	str	r2, [r3, #4]
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	200000e8 	.word	0x200000e8

08000168 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(),
				  uint32_t DELAY,
				  uint32_t PERIOD){
 8000168:	b580      	push	{r7, lr}
 800016a:	b086      	sub	sp, #24
 800016c:	af00      	add	r7, sp, #0
 800016e:	60f8      	str	r0, [r7, #12]
 8000170:	60b9      	str	r1, [r7, #8]
 8000172:	607a      	str	r2, [r7, #4]
	DELAY = DELAY / TICK;
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	4a3b      	ldr	r2, [pc, #236]	; (8000264 <SCH_Add_Task+0xfc>)
 8000178:	fba2 2303 	umull	r2, r3, r2, r3
 800017c:	08db      	lsrs	r3, r3, #3
 800017e:	60bb      	str	r3, [r7, #8]
	PERIOD = PERIOD / TICK;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	4a38      	ldr	r2, [pc, #224]	; (8000264 <SCH_Add_Task+0xfc>)
 8000184:	fba2 2303 	umull	r2, r3, r2, r3
 8000188:	08db      	lsrs	r3, r3, #3
 800018a:	607b      	str	r3, [r7, #4]
	// create a task
	TaskNode* newTask = (TaskNode*)malloc(sizeof(TaskNode));
 800018c:	2014      	movs	r0, #20
 800018e:	f002 fcfb 	bl	8002b88 <malloc>
 8000192:	4603      	mov	r3, r0
 8000194:	613b      	str	r3, [r7, #16]
	newTask->pTask = pFunction;
 8000196:	693b      	ldr	r3, [r7, #16]
 8000198:	68fa      	ldr	r2, [r7, #12]
 800019a:	601a      	str	r2, [r3, #0]
  newTask->Delay = DELAY;
 800019c:	693b      	ldr	r3, [r7, #16]
 800019e:	68ba      	ldr	r2, [r7, #8]
 80001a0:	605a      	str	r2, [r3, #4]
  newTask->Period = PERIOD;
 80001a2:	693b      	ldr	r3, [r7, #16]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	609a      	str	r2, [r3, #8]
  newTask->next = NULL;
 80001a8:	693b      	ldr	r3, [r7, #16]
 80001aa:	2200      	movs	r2, #0
 80001ac:	611a      	str	r2, [r3, #16]

	//if there is no task -> assign new task to head
    if (list.head == NULL) {
 80001ae:	4b2e      	ldr	r3, [pc, #184]	; (8000268 <SCH_Add_Task+0x100>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d106      	bne.n	80001c4 <SCH_Add_Task+0x5c>
        list.head = newTask;
 80001b6:	4a2c      	ldr	r2, [pc, #176]	; (8000268 <SCH_Add_Task+0x100>)
 80001b8:	693b      	ldr	r3, [r7, #16]
 80001ba:	6013      	str	r3, [r2, #0]
        list.tail = newTask;
 80001bc:	4a2a      	ldr	r2, [pc, #168]	; (8000268 <SCH_Add_Task+0x100>)
 80001be:	693b      	ldr	r3, [r7, #16]
 80001c0:	6053      	str	r3, [r2, #4]
        return;
 80001c2:	e04b      	b.n	800025c <SCH_Add_Task+0xf4>
    }

	// if delay < head->delay -> assign new task to head and subtract delay
    if (DELAY < list.head->Delay) {
 80001c4:	4b28      	ldr	r3, [pc, #160]	; (8000268 <SCH_Add_Task+0x100>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	429a      	cmp	r2, r3
 80001ce:	d20f      	bcs.n	80001f0 <SCH_Add_Task+0x88>
        newTask->next = list.head;
 80001d0:	4b25      	ldr	r3, [pc, #148]	; (8000268 <SCH_Add_Task+0x100>)
 80001d2:	681a      	ldr	r2, [r3, #0]
 80001d4:	693b      	ldr	r3, [r7, #16]
 80001d6:	611a      	str	r2, [r3, #16]
        list.head->Delay -= DELAY;
 80001d8:	4b23      	ldr	r3, [pc, #140]	; (8000268 <SCH_Add_Task+0x100>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	6859      	ldr	r1, [r3, #4]
 80001de:	4b22      	ldr	r3, [pc, #136]	; (8000268 <SCH_Add_Task+0x100>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	68ba      	ldr	r2, [r7, #8]
 80001e4:	1a8a      	subs	r2, r1, r2
 80001e6:	605a      	str	r2, [r3, #4]
        list.head = newTask;
 80001e8:	4a1f      	ldr	r2, [pc, #124]	; (8000268 <SCH_Add_Task+0x100>)
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	6013      	str	r3, [r2, #0]
        return;
 80001ee:	e035      	b.n	800025c <SCH_Add_Task+0xf4>
    }

	// so s√°nh thoi gian delay voi cac node
    TaskNode* current = list.head;
 80001f0:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <SCH_Add_Task+0x100>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	617b      	str	r3, [r7, #20]
		DELAY -= current->Delay;
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	68ba      	ldr	r2, [r7, #8]
 80001fc:	1ad3      	subs	r3, r2, r3
 80001fe:	60bb      	str	r3, [r7, #8]
    while (current->next != NULL && DELAY >= current->next->Delay) {
 8000200:	e008      	b.n	8000214 <SCH_Add_Task+0xac>
        DELAY -= current->next->Delay;
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	691b      	ldr	r3, [r3, #16]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	68ba      	ldr	r2, [r7, #8]
 800020a:	1ad3      	subs	r3, r2, r3
 800020c:	60bb      	str	r3, [r7, #8]
        current = current->next;
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	691b      	ldr	r3, [r3, #16]
 8000212:	617b      	str	r3, [r7, #20]
    while (current->next != NULL && DELAY >= current->next->Delay) {
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d005      	beq.n	8000228 <SCH_Add_Task+0xc0>
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	691b      	ldr	r3, [r3, #16]
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	68ba      	ldr	r2, [r7, #8]
 8000224:	429a      	cmp	r2, r3
 8000226:	d2ec      	bcs.n	8000202 <SCH_Add_Task+0x9a>
    }

    newTask->next = current->next;
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	691a      	ldr	r2, [r3, #16]
 800022c:	693b      	ldr	r3, [r7, #16]
 800022e:	611a      	str	r2, [r3, #16]
    if (current->next != NULL) {
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	691b      	ldr	r3, [r3, #16]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d008      	beq.n	800024a <SCH_Add_Task+0xe2>
        current->next->Delay -= DELAY;
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	691b      	ldr	r3, [r3, #16]
 800023c:	6859      	ldr	r1, [r3, #4]
 800023e:	697b      	ldr	r3, [r7, #20]
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	68ba      	ldr	r2, [r7, #8]
 8000244:	1a8a      	subs	r2, r1, r2
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	e002      	b.n	8000250 <SCH_Add_Task+0xe8>
    } else {
        list.tail = newTask;
 800024a:	4a07      	ldr	r2, [pc, #28]	; (8000268 <SCH_Add_Task+0x100>)
 800024c:	693b      	ldr	r3, [r7, #16]
 800024e:	6053      	str	r3, [r2, #4]
    }
    current->next = newTask;
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	693a      	ldr	r2, [r7, #16]
 8000254:	611a      	str	r2, [r3, #16]
    newTask->Delay = DELAY;
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	68ba      	ldr	r2, [r7, #8]
 800025a:	605a      	str	r2, [r3, #4]
}
 800025c:	3718      	adds	r7, #24
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	cccccccd 	.word	0xcccccccd
 8000268:	200000e8 	.word	0x200000e8

0800026c <SCH_Update>:

void SCH_Update(){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	if (list.head == NULL) return;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <SCH_Update+0x4c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d01b      	beq.n	80002b0 <SCH_Update+0x44>

		// neu delay > 0 => tru
	if(list.head->Delay > 0){
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <SCH_Update+0x4c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d005      	beq.n	800028e <SCH_Update+0x22>
		list.head->Delay--;
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <SCH_Update+0x4c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	3a01      	subs	r2, #1
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	e011      	b.n	80002b2 <SCH_Update+0x46>
	}
	else{
		list.head->RunMe++;
 800028e:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <SCH_Update+0x4c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	3201      	adds	r2, #1
 8000296:	60da      	str	r2, [r3, #12]
		if(list.head->Period){
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <SCH_Update+0x4c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d007      	beq.n	80002b2 <SCH_Update+0x46>
				list.head->Delay = list.head->Period;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SCH_Update+0x4c>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SCH_Update+0x4c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	6892      	ldr	r2, [r2, #8]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	e000      	b.n	80002b2 <SCH_Update+0x46>
	if (list.head == NULL) return;
 80002b0:	bf00      	nop
		}
	}

}
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	200000e8 	.word	0x200000e8

080002bc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(){
 80002bc:	b5b0      	push	{r4, r5, r7, lr}
 80002be:	b086      	sub	sp, #24
 80002c0:	af00      	add	r7, sp, #0
	// kiem tra task dau da xong chua
	if(list.head->RunMe > 0)
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <SCH_Dispatch_Tasks+0x74>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d02e      	beq.n	800032a <SCH_Dispatch_Tasks+0x6e>
	{
		// do the task
		(*list.head->pTask)();
 80002cc:	4b18      	ldr	r3, [pc, #96]	; (8000330 <SCH_Dispatch_Tasks+0x74>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4798      	blx	r3
		list.head->RunMe--;
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SCH_Dispatch_Tasks+0x74>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	68da      	ldr	r2, [r3, #12]
 80002da:	3a01      	subs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]

		// if one-shot task --> delete
		if(list.head->Period == 0){
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SCH_Dispatch_Tasks+0x74>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d102      	bne.n	80002ee <SCH_Dispatch_Tasks+0x32>
			SCH_Delete_Task();
 80002e8:	f000 f824 	bl	8000334 <SCH_Delete_Task>
			return;
 80002ec:	e01d      	b.n	800032a <SCH_Dispatch_Tasks+0x6e>
		}


		if(list.head->RunMe == 0){
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <SCH_Dispatch_Tasks+0x74>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d118      	bne.n	800032a <SCH_Dispatch_Tasks+0x6e>
			//create a new note:
			TaskNode newtask;
			newtask = (*list.head);
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <SCH_Dispatch_Tasks+0x74>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	1d3c      	adds	r4, r7, #4
 80002fe:	461d      	mov	r5, r3
 8000300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000304:	682b      	ldr	r3, [r5, #0]
 8000306:	6023      	str	r3, [r4, #0]
			// delete task at the head of list
			SCH_Delete_Task();
 8000308:	f000 f814 	bl	8000334 <SCH_Delete_Task>

			// add task to List again if it has period > 0
				SCH_Add_Task(newtask.pTask, newtask.Period*TICK, newtask.Period*TICK);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	4613      	mov	r3, r2
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	4413      	add	r3, r2
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	4619      	mov	r1, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	4613      	mov	r3, r2
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	4413      	add	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	461a      	mov	r2, r3
 8000326:	f7ff ff1f 	bl	8000168 <SCH_Add_Task>
		}


	}

}
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bdb0      	pop	{r4, r5, r7, pc}
 8000330:	200000e8 	.word	0x200000e8

08000334 <SCH_Delete_Task>:

void SCH_Delete_Task(){
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	if(list.head == NULL)
 800033a:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <SCH_Delete_Task+0x3c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d012      	beq.n	8000368 <SCH_Delete_Task+0x34>
		return;

	TaskNode* temp = list.head;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <SCH_Delete_Task+0x3c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	607b      	str	r3, [r7, #4]
	list.head = list.head->next;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <SCH_Delete_Task+0x3c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	691b      	ldr	r3, [r3, #16]
 800034e:	4a08      	ldr	r2, [pc, #32]	; (8000370 <SCH_Delete_Task+0x3c>)
 8000350:	6013      	str	r3, [r2, #0]
  free(temp);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f002 fc20 	bl	8002b98 <free>
	if (list.head == NULL){
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <SCH_Delete_Task+0x3c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d104      	bne.n	800036a <SCH_Delete_Task+0x36>
		list.tail = NULL;
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <SCH_Delete_Task+0x3c>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	e000      	b.n	800036a <SCH_Delete_Task+0x36>
		return;
 8000368:	bf00      	nop
	}
}
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000e8 	.word	0x200000e8

08000374 <get_input_button>:

uint32_t timeForKeyPress[NO_OF_BUTTON];

uint8_t PressedFlag[NO_OF_BUTTON];

void get_input_button(uint8_t index, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000374:	b590      	push	{r4, r7, lr}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	6039      	str	r1, [r7, #0]
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4613      	mov	r3, r2
 8000382:	80bb      	strh	r3, [r7, #4]
	KeyReg0[index] = KeyReg1[index];
 8000384:	79fa      	ldrb	r2, [r7, #7]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	490b      	ldr	r1, [pc, #44]	; (80003b8 <get_input_button+0x44>)
 800038a:	5c89      	ldrb	r1, [r1, r2]
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <get_input_button+0x48>)
 800038e:	54d1      	strb	r1, [r2, r3]
	KeyReg1[index] = KeyReg2[index];
 8000390:	79fa      	ldrb	r2, [r7, #7]
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	490a      	ldr	r1, [pc, #40]	; (80003c0 <get_input_button+0x4c>)
 8000396:	5c89      	ldrb	r1, [r1, r2]
 8000398:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <get_input_button+0x44>)
 800039a:	54d1      	strb	r1, [r2, r3]
	KeyReg2[index] = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800039c:	79fc      	ldrb	r4, [r7, #7]
 800039e:	88bb      	ldrh	r3, [r7, #4]
 80003a0:	4619      	mov	r1, r3
 80003a2:	6838      	ldr	r0, [r7, #0]
 80003a4:	f001 fbc6 	bl	8001b34 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <get_input_button+0x4c>)
 80003ae:	551a      	strb	r2, [r3, r4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd90      	pop	{r4, r7, pc}
 80003b8:	20000114 	.word	0x20000114
 80003bc:	20000108 	.word	0x20000108
 80003c0:	20000120 	.word	0x20000120

080003c4 <get_pressed_flag>:

uint8_t get_pressed_flag(uint8_t index){
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	return PressedFlag[index];
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4a03      	ldr	r2, [pc, #12]	; (80003e0 <get_pressed_flag+0x1c>)
 80003d2:	5cd3      	ldrb	r3, [r2, r3]
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	200000f0 	.word	0x200000f0

080003e4 <set_pressed_flag>:
void set_pressed_flag(uint8_t index){
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	PressedFlag[index] = 0;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a03      	ldr	r2, [pc, #12]	; (8000400 <set_pressed_flag+0x1c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	54d1      	strb	r1, [r2, r3]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	200000f0 	.word	0x200000f0

08000404 <getInputKey>:

void getInputKey(){
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
	get_input_button(0, Button1_GPIO_Port, Button1_Pin);
 800040a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800040e:	4935      	ldr	r1, [pc, #212]	; (80004e4 <getInputKey+0xe0>)
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff ffaf 	bl	8000374 <get_input_button>
	get_input_button(1, Button2_GPIO_Port, Button2_Pin);
 8000416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800041a:	4932      	ldr	r1, [pc, #200]	; (80004e4 <getInputKey+0xe0>)
 800041c:	2001      	movs	r0, #1
 800041e:	f7ff ffa9 	bl	8000374 <get_input_button>
	get_input_button(2, Button3_GPIO_Port, Button3_Pin);
 8000422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000426:	492f      	ldr	r1, [pc, #188]	; (80004e4 <getInputKey+0xe0>)
 8000428:	2002      	movs	r0, #2
 800042a:	f7ff ffa3 	bl	8000374 <get_input_button>

	int no_of_used_button = 3;
 800042e:	2303      	movs	r3, #3
 8000430:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < no_of_used_button; i++){
 8000432:	2300      	movs	r3, #0
 8000434:	71fb      	strb	r3, [r7, #7]
 8000436:	e04b      	b.n	80004d0 <getInputKey+0xcc>
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	4a2b      	ldr	r2, [pc, #172]	; (80004e8 <getInputKey+0xe4>)
 800043c:	5cd2      	ldrb	r2, [r2, r3]
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	492a      	ldr	r1, [pc, #168]	; (80004ec <getInputKey+0xe8>)
 8000442:	5ccb      	ldrb	r3, [r1, r3]
 8000444:	429a      	cmp	r2, r3
 8000446:	d140      	bne.n	80004ca <getInputKey+0xc6>
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	4a28      	ldr	r2, [pc, #160]	; (80004ec <getInputKey+0xe8>)
 800044c:	5cd2      	ldrb	r2, [r2, r3]
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	4927      	ldr	r1, [pc, #156]	; (80004f0 <getInputKey+0xec>)
 8000452:	5ccb      	ldrb	r3, [r1, r3]
 8000454:	429a      	cmp	r2, r3
 8000456:	d138      	bne.n	80004ca <getInputKey+0xc6>
			// x·ª≠ l√Ω nh·∫•n nhanh
			if(KeyReg3[i] != KeyReg2[i]){
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4a26      	ldr	r2, [pc, #152]	; (80004f4 <getInputKey+0xf0>)
 800045c:	5cd2      	ldrb	r2, [r2, r3]
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	4923      	ldr	r1, [pc, #140]	; (80004f0 <getInputKey+0xec>)
 8000462:	5ccb      	ldrb	r3, [r1, r3]
 8000464:	429a      	cmp	r2, r3
 8000466:	d014      	beq.n	8000492 <getInputKey+0x8e>
				KeyReg3[i] = KeyReg2[i];
 8000468:	79fa      	ldrb	r2, [r7, #7]
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	4920      	ldr	r1, [pc, #128]	; (80004f0 <getInputKey+0xec>)
 800046e:	5c89      	ldrb	r1, [r1, r2]
 8000470:	4a20      	ldr	r2, [pc, #128]	; (80004f4 <getInputKey+0xf0>)
 8000472:	54d1      	strb	r1, [r2, r3]
				if(KeyReg2[i] == PRESSED_STATE){
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4a1e      	ldr	r2, [pc, #120]	; (80004f0 <getInputKey+0xec>)
 8000478:	5cd3      	ldrb	r3, [r2, r3]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d125      	bne.n	80004ca <getInputKey+0xc6>
					//todo
					PressedFlag[i] = 1;
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <getInputKey+0xf4>)
 8000482:	2101      	movs	r1, #1
 8000484:	54d1      	strb	r1, [r2, r3]
					timeForKeyPress[i] = TIME_INTO_LONG_PRESS;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <getInputKey+0xf8>)
 800048a:	21c8      	movs	r1, #200	; 0xc8
 800048c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000490:	e01b      	b.n	80004ca <getInputKey+0xc6>
				}
			}
			// x·ª≠ l√Ω nh·∫•n l√¢u
			else{
				if(KeyReg2[i] == PRESSED_STATE){
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <getInputKey+0xec>)
 8000496:	5cd3      	ldrb	r3, [r2, r3]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d116      	bne.n	80004ca <getInputKey+0xc6>
					timeForKeyPress[i]--;
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4a17      	ldr	r2, [pc, #92]	; (80004fc <getInputKey+0xf8>)
 80004a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a4:	3a01      	subs	r2, #1
 80004a6:	4915      	ldr	r1, [pc, #84]	; (80004fc <getInputKey+0xf8>)
 80004a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(timeForKeyPress[i] <= 0){
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	4a13      	ldr	r2, [pc, #76]	; (80004fc <getInputKey+0xf8>)
 80004b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d108      	bne.n	80004ca <getInputKey+0xc6>
						//todo
						PressedFlag[i] = 1;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <getInputKey+0xf4>)
 80004bc:	2101      	movs	r1, #1
 80004be:	54d1      	strb	r1, [r2, r3]
						timeForKeyPress[i] = CYCLE_LONG_PRESS;
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <getInputKey+0xf8>)
 80004c4:	2132      	movs	r1, #50	; 0x32
 80004c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i = 0; i < no_of_used_button; i++){
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3301      	adds	r3, #1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dcaf      	bgt.n	8000438 <getInputKey+0x34>
				}
			}
		}
	}

}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40010800 	.word	0x40010800
 80004e8:	20000108 	.word	0x20000108
 80004ec:	20000114 	.word	0x20000114
 80004f0:	20000120 	.word	0x20000120
 80004f4:	200000fc 	.word	0x200000fc
 80004f8:	200000f0 	.word	0x200000f0
 80004fc:	2000012c 	.word	0x2000012c

08000500 <fsm_automatic>:

#define DELAY 1000
uint32_t time_counter = 0;
uint32_t red_counter;

void fsm_automatic(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	if(getTimerFlag(0)){
 8000504:	2000      	movs	r0, #0
 8000506:	f000 fe29 	bl	800115c <getTimerFlag>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	f000 80e8 	beq.w	80006e2 <fsm_automatic+0x1e2>
		switch(status){
 8000512:	4b75      	ldr	r3, [pc, #468]	; (80006e8 <fsm_automatic+0x1e8>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b04      	cmp	r3, #4
 8000518:	f200 80d5 	bhi.w	80006c6 <fsm_automatic+0x1c6>
 800051c:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <fsm_automatic+0x24>)
 800051e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000522:	bf00      	nop
 8000524:	08000539 	.word	0x08000539
 8000528:	08000565 	.word	0x08000565
 800052c:	080005bb 	.word	0x080005bb
 8000530:	08000617 	.word	0x08000617
 8000534:	0800066b 	.word	0x0800066b
			case INIT:
				time_counter = green_time;
 8000538:	4b6c      	ldr	r3, [pc, #432]	; (80006ec <fsm_automatic+0x1ec>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a6c      	ldr	r2, [pc, #432]	; (80006f0 <fsm_automatic+0x1f0>)
 800053e:	6013      	str	r3, [r2, #0]
				red_counter = red_time;
 8000540:	4b6c      	ldr	r3, [pc, #432]	; (80006f4 <fsm_automatic+0x1f4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a6c      	ldr	r2, [pc, #432]	; (80006f8 <fsm_automatic+0x1f8>)
 8000546:	6013      	str	r3, [r2, #0]
				update_segment_buffer(time_counter, red_counter);
 8000548:	4b69      	ldr	r3, [pc, #420]	; (80006f0 <fsm_automatic+0x1f0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a6a      	ldr	r2, [pc, #424]	; (80006f8 <fsm_automatic+0x1f8>)
 800054e:	6812      	ldr	r2, [r2, #0]
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fbae 	bl	8000cb4 <update_segment_buffer>
				led_green_and_red();
 8000558:	f000 ff44 	bl	80013e4 <led_green_and_red>
				status = GREEN_RED;
 800055c:	4b62      	ldr	r3, [pc, #392]	; (80006e8 <fsm_automatic+0x1e8>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
				break;
 8000562:	e0b9      	b.n	80006d8 <fsm_automatic+0x1d8>
			case GREEN_RED:
				if(1){
					led_green_and_red();
 8000564:	f000 ff3e 	bl	80013e4 <led_green_and_red>
					update_segment_buffer(--time_counter, --red_counter);
 8000568:	4b61      	ldr	r3, [pc, #388]	; (80006f0 <fsm_automatic+0x1f0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3b01      	subs	r3, #1
 800056e:	4a60      	ldr	r2, [pc, #384]	; (80006f0 <fsm_automatic+0x1f0>)
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	4b5f      	ldr	r3, [pc, #380]	; (80006f0 <fsm_automatic+0x1f0>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b60      	ldr	r3, [pc, #384]	; (80006f8 <fsm_automatic+0x1f8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	495e      	ldr	r1, [pc, #376]	; (80006f8 <fsm_automatic+0x1f8>)
 800057e:	600b      	str	r3, [r1, #0]
 8000580:	4b5d      	ldr	r3, [pc, #372]	; (80006f8 <fsm_automatic+0x1f8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	4610      	mov	r0, r2
 8000588:	f000 fb94 	bl	8000cb4 <update_segment_buffer>
				}
				if(time_counter <= 0){
 800058c:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <fsm_automatic+0x1f0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	f040 809a 	bne.w	80006ca <fsm_automatic+0x1ca>
					led_yellow_and_red();
 8000596:	f000 ff35 	bl	8001404 <led_yellow_and_red>
					time_counter = yellow_time;
 800059a:	4b58      	ldr	r3, [pc, #352]	; (80006fc <fsm_automatic+0x1fc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a54      	ldr	r2, [pc, #336]	; (80006f0 <fsm_automatic+0x1f0>)
 80005a0:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 80005a2:	4b53      	ldr	r3, [pc, #332]	; (80006f0 <fsm_automatic+0x1f0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a54      	ldr	r2, [pc, #336]	; (80006f8 <fsm_automatic+0x1f8>)
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fb81 	bl	8000cb4 <update_segment_buffer>
					status = YELLOW_RED;
 80005b2:	4b4d      	ldr	r3, [pc, #308]	; (80006e8 <fsm_automatic+0x1e8>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	701a      	strb	r2, [r3, #0]
				}
				break;
 80005b8:	e087      	b.n	80006ca <fsm_automatic+0x1ca>
			case YELLOW_RED:
				if(1){
					led_yellow_and_red();
 80005ba:	f000 ff23 	bl	8001404 <led_yellow_and_red>
					update_segment_buffer(--time_counter, --red_counter);
 80005be:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <fsm_automatic+0x1f0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a4a      	ldr	r2, [pc, #296]	; (80006f0 <fsm_automatic+0x1f0>)
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <fsm_automatic+0x1f0>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <fsm_automatic+0x1f8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4949      	ldr	r1, [pc, #292]	; (80006f8 <fsm_automatic+0x1f8>)
 80005d4:	600b      	str	r3, [r1, #0]
 80005d6:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <fsm_automatic+0x1f8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	4610      	mov	r0, r2
 80005de:	f000 fb69 	bl	8000cb4 <update_segment_buffer>
				}
				if(time_counter <= 0){
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <fsm_automatic+0x1f0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d171      	bne.n	80006ce <fsm_automatic+0x1ce>
					led_red_and_green();
 80005ea:	f000 fedb 	bl	80013a4 <led_red_and_green>
					time_counter = green_time;
 80005ee:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <fsm_automatic+0x1ec>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a3f      	ldr	r2, [pc, #252]	; (80006f0 <fsm_automatic+0x1f0>)
 80005f4:	6013      	str	r3, [r2, #0]
					red_counter = red_time;
 80005f6:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <fsm_automatic+0x1f4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a3f      	ldr	r2, [pc, #252]	; (80006f8 <fsm_automatic+0x1f8>)
 80005fc:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 80005fe:	4b3c      	ldr	r3, [pc, #240]	; (80006f0 <fsm_automatic+0x1f0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a3d      	ldr	r2, [pc, #244]	; (80006f8 <fsm_automatic+0x1f8>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fb53 	bl	8000cb4 <update_segment_buffer>
					status = RED_GREEN;
 800060e:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <fsm_automatic+0x1e8>)
 8000610:	2203      	movs	r2, #3
 8000612:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000614:	e05b      	b.n	80006ce <fsm_automatic+0x1ce>
			case RED_GREEN:
				if(1){
					led_red_and_green();
 8000616:	f000 fec5 	bl	80013a4 <led_red_and_green>
					update_segment_buffer(--time_counter, --red_counter);
 800061a:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <fsm_automatic+0x1f0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <fsm_automatic+0x1f0>)
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <fsm_automatic+0x1f0>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <fsm_automatic+0x1f8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	4932      	ldr	r1, [pc, #200]	; (80006f8 <fsm_automatic+0x1f8>)
 8000630:	600b      	str	r3, [r1, #0]
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <fsm_automatic+0x1f8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f000 fb3b 	bl	8000cb4 <update_segment_buffer>
				}
				if(time_counter <= 0){
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <fsm_automatic+0x1f0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d145      	bne.n	80006d2 <fsm_automatic+0x1d2>
					led_red_and_yellow();
 8000646:	f000 febd 	bl	80013c4 <led_red_and_yellow>
					time_counter = yellow_time;
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <fsm_automatic+0x1fc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a28      	ldr	r2, [pc, #160]	; (80006f0 <fsm_automatic+0x1f0>)
 8000650:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <fsm_automatic+0x1f0>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <fsm_automatic+0x1f8>)
 8000658:	6812      	ldr	r2, [r2, #0]
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fb29 	bl	8000cb4 <update_segment_buffer>
					status = RED_YELLOW;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <fsm_automatic+0x1e8>)
 8000664:	2204      	movs	r2, #4
 8000666:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000668:	e033      	b.n	80006d2 <fsm_automatic+0x1d2>
			case RED_YELLOW:
				if(1){
					led_red_and_yellow();
 800066a:	f000 feab 	bl	80013c4 <led_red_and_yellow>
					update_segment_buffer(--time_counter, --red_counter);
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <fsm_automatic+0x1f0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3b01      	subs	r3, #1
 8000674:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <fsm_automatic+0x1f0>)
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <fsm_automatic+0x1f0>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <fsm_automatic+0x1f8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3b01      	subs	r3, #1
 8000682:	491d      	ldr	r1, [pc, #116]	; (80006f8 <fsm_automatic+0x1f8>)
 8000684:	600b      	str	r3, [r1, #0]
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <fsm_automatic+0x1f8>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f000 fb11 	bl	8000cb4 <update_segment_buffer>
				}
				if(time_counter <= 0){
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <fsm_automatic+0x1f0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d11d      	bne.n	80006d6 <fsm_automatic+0x1d6>
					led_green_and_red();
 800069a:	f000 fea3 	bl	80013e4 <led_green_and_red>
					time_counter = green_time;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <fsm_automatic+0x1ec>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <fsm_automatic+0x1f0>)
 80006a4:	6013      	str	r3, [r2, #0]
					red_counter = red_time;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <fsm_automatic+0x1f4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <fsm_automatic+0x1f8>)
 80006ac:	6013      	str	r3, [r2, #0]
					update_segment_buffer(time_counter, red_counter);
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <fsm_automatic+0x1f0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <fsm_automatic+0x1f8>)
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fafb 	bl	8000cb4 <update_segment_buffer>
					status = GREEN_RED;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <fsm_automatic+0x1e8>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
				}
				break;
 80006c4:	e007      	b.n	80006d6 <fsm_automatic+0x1d6>
			default:
				break;
 80006c6:	bf00      	nop
 80006c8:	e006      	b.n	80006d8 <fsm_automatic+0x1d8>
				break;
 80006ca:	bf00      	nop
 80006cc:	e004      	b.n	80006d8 <fsm_automatic+0x1d8>
				break;
 80006ce:	bf00      	nop
 80006d0:	e002      	b.n	80006d8 <fsm_automatic+0x1d8>
				break;
 80006d2:	bf00      	nop
 80006d4:	e000      	b.n	80006d8 <fsm_automatic+0x1d8>
				break;
 80006d6:	bf00      	nop
		}
		setTimer(0,DELAY);
 80006d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 fcf5 	bl	80010cc <setTimer>
	}

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a0 	.word	0x200000a0
 80006ec:	20000000 	.word	0x20000000
 80006f0:	2000009c 	.word	0x2000009c
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000154 	.word	0x20000154
 80006fc:	20000004 	.word	0x20000004

08000700 <fsm_manual>:

#include "fsm_manual.h"

#define CYCLE_TIME 200

void fsm_manual(){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	switch(status){
 8000704:	4b75      	ldr	r3, [pc, #468]	; (80008dc <fsm_manual+0x1dc>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	3b15      	subs	r3, #21
 800070a:	2b03      	cmp	r3, #3
 800070c:	f200 80e3 	bhi.w	80008d6 <fsm_manual+0x1d6>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <fsm_manual+0x18>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000729 	.word	0x08000729
 800071c:	08000749 	.word	0x08000749
 8000720:	080007d7 	.word	0x080007d7
 8000724:	08000865 	.word	0x08000865
		case MAN_GREEN_RED:
			setTimer(1, CYCLE_TIME);
 8000728:	21c8      	movs	r1, #200	; 0xc8
 800072a:	2001      	movs	r0, #1
 800072c:	f000 fcce 	bl	80010cc <setTimer>
			toggle_led_red();
 8000730:	f000 fe78 	bl	8001424 <toggle_led_red>
			status = MAN_MODE_2;
 8000734:	4b69      	ldr	r3, [pc, #420]	; (80008dc <fsm_manual+0x1dc>)
 8000736:	2216      	movs	r2, #22
 8000738:	701a      	strb	r2, [r3, #0]
			update_segment_buffer(red_time, MAN_MODE_2-20);
 800073a:	4b69      	ldr	r3, [pc, #420]	; (80008e0 <fsm_manual+0x1e0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2102      	movs	r1, #2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fab7 	bl	8000cb4 <update_segment_buffer>
			break;
 8000746:	e0c7      	b.n	80008d8 <fsm_manual+0x1d8>
		case MAN_MODE_2:
			// blink led
			if(getTimerFlag(1)){
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fd07 	bl	800115c <getTimerFlag>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d005      	beq.n	8000760 <fsm_manual+0x60>
				toggle_led_red();
 8000754:	f000 fe66 	bl	8001424 <toggle_led_red>
				setTimer(1, CYCLE_TIME);
 8000758:	21c8      	movs	r1, #200	; 0xc8
 800075a:	2001      	movs	r0, #1
 800075c:	f000 fcb6 	bl	80010cc <setTimer>
			}

			// if button1 or button2 is pressed -> refresh timeout
			if(get_pressed_flag(0) || get_pressed_flag(1)){ // button 1 is pressed
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff fe2f 	bl	80003c4 <get_pressed_flag>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <fsm_manual+0x78>
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fe29 	bl	80003c4 <get_pressed_flag>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d004      	beq.n	8000782 <fsm_manual+0x82>
				setTimer(2, FSM_MANUAL_TIMEOUT); // reset timeout for man_fsm
 8000778:	f242 7110 	movw	r1, #10000	; 0x2710
 800077c:	2002      	movs	r0, #2
 800077e:	f000 fca5 	bl	80010cc <setTimer>
			}

			//handle:
					//button 1: change mode
			if(get_pressed_flag(0)){
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fe1e 	bl	80003c4 <get_pressed_flag>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d007      	beq.n	800079e <fsm_manual+0x9e>
				status = MAN_MODE_3;
 800078e:	4b53      	ldr	r3, [pc, #332]	; (80008dc <fsm_manual+0x1dc>)
 8000790:	2217      	movs	r2, #23
 8000792:	701a      	strb	r2, [r3, #0]
				toggle_led_yellow();
 8000794:	f000 fe6e 	bl	8001474 <toggle_led_yellow>
				set_pressed_flag(0);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fe23 	bl	80003e4 <set_pressed_flag>
			}
					//button 2: increase value LED RED
			if(get_pressed_flag(1)){
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fe10 	bl	80003c4 <get_pressed_flag>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00e      	beq.n	80007c8 <fsm_manual+0xc8>
//				red_time = (red_time >= 1 && red_time <= 99) ? red_time++ : 1;
				red_time++;
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <fsm_manual+0x1e0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a4b      	ldr	r2, [pc, #300]	; (80008e0 <fsm_manual+0x1e0>)
 80007b2:	6013      	str	r3, [r2, #0]
				if(red_time >= 100)
 80007b4:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <fsm_manual+0x1e0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b63      	cmp	r3, #99	; 0x63
 80007ba:	d902      	bls.n	80007c2 <fsm_manual+0xc2>
					red_time = 1;
 80007bc:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <fsm_manual+0x1e0>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
				set_pressed_flag(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fe0e 	bl	80003e4 <set_pressed_flag>
			}
			//change segment buffer
			update_segment_buffer(red_time, MAN_MODE_2-20);
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <fsm_manual+0x1e0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fa70 	bl	8000cb4 <update_segment_buffer>
			break;
 80007d4:	e080      	b.n	80008d8 <fsm_manual+0x1d8>
		case MAN_MODE_3:
			//blink led
			if(getTimerFlag(1)){
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 fcc0 	bl	800115c <getTimerFlag>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <fsm_manual+0xee>
				toggle_led_yellow();
 80007e2:	f000 fe47 	bl	8001474 <toggle_led_yellow>
				setTimer(1, CYCLE_TIME);
 80007e6:	21c8      	movs	r1, #200	; 0xc8
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 fc6f 	bl	80010cc <setTimer>
			}
			// if button1 or button2 is pressed -> refresh timeout
			if(get_pressed_flag(0) || get_pressed_flag(1)){ // button 1 is pressed
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fde8 	bl	80003c4 <get_pressed_flag>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d105      	bne.n	8000806 <fsm_manual+0x106>
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fde2 	bl	80003c4 <get_pressed_flag>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d004      	beq.n	8000810 <fsm_manual+0x110>
				setTimer(2, FSM_MANUAL_TIMEOUT); // reset timeout for man_fsm
 8000806:	f242 7110 	movw	r1, #10000	; 0x2710
 800080a:	2002      	movs	r0, #2
 800080c:	f000 fc5e 	bl	80010cc <setTimer>
			}

			//handle:
					//button 1: change mode
			if(get_pressed_flag(0)){
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fdd7 	bl	80003c4 <get_pressed_flag>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d007      	beq.n	800082c <fsm_manual+0x12c>
				status = MAN_MODE_4;
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <fsm_manual+0x1dc>)
 800081e:	2218      	movs	r2, #24
 8000820:	701a      	strb	r2, [r3, #0]
				toggle_led_green();
 8000822:	f000 fe4f 	bl	80014c4 <toggle_led_green>
				set_pressed_flag(0);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fddc 	bl	80003e4 <set_pressed_flag>
			}
					//button 2: increase value LED RED
			if(get_pressed_flag(1)){
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fdc9 	bl	80003c4 <get_pressed_flag>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00e      	beq.n	8000856 <fsm_manual+0x156>
				yellow_time++;
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <fsm_manual+0x1e4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <fsm_manual+0x1e4>)
 8000840:	6013      	str	r3, [r2, #0]
				if(yellow_time >= 100)
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <fsm_manual+0x1e4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b63      	cmp	r3, #99	; 0x63
 8000848:	d902      	bls.n	8000850 <fsm_manual+0x150>
					yellow_time = 1;
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <fsm_manual+0x1e4>)
 800084c:	2201      	movs	r2, #1
 800084e:	601a      	str	r2, [r3, #0]
				set_pressed_flag(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fdc7 	bl	80003e4 <set_pressed_flag>
			}
			//change segment buffer
			update_segment_buffer(yellow_time, MAN_MODE_3-20);
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <fsm_manual+0x1e4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2103      	movs	r1, #3
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fa29 	bl	8000cb4 <update_segment_buffer>
			break;
 8000862:	e039      	b.n	80008d8 <fsm_manual+0x1d8>
		case MAN_MODE_4:
			//blink led
			if(getTimerFlag(1)){
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fc79 	bl	800115c <getTimerFlag>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <fsm_manual+0x17c>
				toggle_led_green();
 8000870:	f000 fe28 	bl	80014c4 <toggle_led_green>
				setTimer(1, CYCLE_TIME);
 8000874:	21c8      	movs	r1, #200	; 0xc8
 8000876:	2001      	movs	r0, #1
 8000878:	f000 fc28 	bl	80010cc <setTimer>
			}
			// if button1 or button2 is pressed -> refresh timeout
			if(get_pressed_flag(0) || get_pressed_flag(1)){ // button 1 is pressed
 800087c:	2000      	movs	r0, #0
 800087e:	f7ff fda1 	bl	80003c4 <get_pressed_flag>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d105      	bne.n	8000894 <fsm_manual+0x194>
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff fd9b 	bl	80003c4 <get_pressed_flag>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <fsm_manual+0x19e>
				setTimer(2, FSM_MANUAL_TIMEOUT); // reset timeout for man_fsm
 8000894:	f242 7110 	movw	r1, #10000	; 0x2710
 8000898:	2002      	movs	r0, #2
 800089a:	f000 fc17 	bl	80010cc <setTimer>
			//handle:
					//button 1: change mode
							/* fsm_setting() handle this task*/

					//button 2: increase value LED RED
			if(get_pressed_flag(1)){
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fd90 	bl	80003c4 <get_pressed_flag>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00e      	beq.n	80008c8 <fsm_manual+0x1c8>
				green_time++;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <fsm_manual+0x1e8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <fsm_manual+0x1e8>)
 80008b2:	6013      	str	r3, [r2, #0]
				if(green_time >= 100)
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <fsm_manual+0x1e8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b63      	cmp	r3, #99	; 0x63
 80008ba:	d902      	bls.n	80008c2 <fsm_manual+0x1c2>
					green_time = 1;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <fsm_manual+0x1e8>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
				set_pressed_flag(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff fd8e 	bl	80003e4 <set_pressed_flag>
			}
			//change segment buffer
			update_segment_buffer(green_time, MAN_MODE_4-20);
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <fsm_manual+0x1e8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2104      	movs	r1, #4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f9f0 	bl	8000cb4 <update_segment_buffer>
			break;
 80008d4:	e000      	b.n	80008d8 <fsm_manual+0x1d8>
		default:
			break;
 80008d6:	bf00      	nop
	}


}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000004 	.word	0x20000004
 80008e8:	20000000 	.word	0x20000000

080008ec <fsm_setting>:

#include "fsm_setting.h"



void fsm_setting(){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

	switch(status){
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <fsm_setting+0xd0>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	dc02      	bgt.n	80008fe <fsm_setting+0x12>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	dc04      	bgt.n	8000906 <fsm_setting+0x1a>
				setTimerFlag(0, 1);
				set_pressed_flag(0);
				break;
			}
		default:
			break;
 80008fc:	e059      	b.n	80009b2 <fsm_setting+0xc6>
 80008fe:	3b16      	subs	r3, #22
	switch(status){
 8000900:	2b02      	cmp	r3, #2
 8000902:	d856      	bhi.n	80009b2 <fsm_setting+0xc6>
 8000904:	e015      	b.n	8000932 <fsm_setting+0x46>
			if(get_pressed_flag(0)){ // button 1 is pressed
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fd5c 	bl	80003c4 <get_pressed_flag>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d051      	beq.n	80009b6 <fsm_setting+0xca>
					setTimer(2, FSM_MANUAL_TIMEOUT); // set timeout for man_fsm
 8000912:	f242 7110 	movw	r1, #10000	; 0x2710
 8000916:	2002      	movs	r0, #2
 8000918:	f000 fbd8 	bl	80010cc <setTimer>
					status = MAN_GREEN_RED;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <fsm_setting+0xd0>)
 800091e:	2215      	movs	r2, #21
 8000920:	701a      	strb	r2, [r3, #0]
					set_pressed_flag(0);
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff fd5e 	bl	80003e4 <set_pressed_flag>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000928:	2120      	movs	r1, #32
 800092a:	4825      	ldr	r0, [pc, #148]	; (80009c0 <fsm_setting+0xd4>)
 800092c:	f001 f931 	bl	8001b92 <HAL_GPIO_TogglePin>
			break;
 8000930:	e041      	b.n	80009b6 <fsm_setting+0xca>
			if(get_pressed_flag(2) || getTimerFlag(2)){
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff fd46 	bl	80003c4 <get_pressed_flag>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <fsm_setting+0x5e>
 800093e:	2002      	movs	r0, #2
 8000940:	f000 fc0c 	bl	800115c <getTimerFlag>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d01e      	beq.n	8000988 <fsm_setting+0x9c>
					status = INIT;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <fsm_setting+0xd0>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
					setTimerFlag(0, 1);
 8000950:	2101      	movs	r1, #1
 8000952:	2000      	movs	r0, #0
 8000954:	f000 fc12 	bl	800117c <setTimerFlag>
					if(red_time != green_time + yellow_time){
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <fsm_setting+0xd8>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <fsm_setting+0xdc>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	441a      	add	r2, r3
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <fsm_setting+0xe0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	d006      	beq.n	8000978 <fsm_setting+0x8c>
						red_time = green_time + yellow_time;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <fsm_setting+0xd8>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <fsm_setting+0xdc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <fsm_setting+0xe0>)
 8000976:	6013      	str	r3, [r2, #0]
					set_pressed_flag(2);
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fd33 	bl	80003e4 <set_pressed_flag>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800097e:	2120      	movs	r1, #32
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <fsm_setting+0xd4>)
 8000982:	f001 f906 	bl	8001b92 <HAL_GPIO_TogglePin>
					break;
 8000986:	e017      	b.n	80009b8 <fsm_setting+0xcc>
			if(status == MAN_MODE_4 && get_pressed_flag(0)){
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <fsm_setting+0xd0>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b18      	cmp	r3, #24
 800098e:	d110      	bne.n	80009b2 <fsm_setting+0xc6>
 8000990:	2000      	movs	r0, #0
 8000992:	f7ff fd17 	bl	80003c4 <get_pressed_flag>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00a      	beq.n	80009b2 <fsm_setting+0xc6>
				status = INIT;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <fsm_setting+0xd0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
				setTimerFlag(0, 1);
 80009a2:	2101      	movs	r1, #1
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 fbe9 	bl	800117c <setTimerFlag>
				set_pressed_flag(0);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fd1a 	bl	80003e4 <set_pressed_flag>
				break;
 80009b0:	e002      	b.n	80009b8 <fsm_setting+0xcc>
			break;
 80009b2:	bf00      	nop
 80009b4:	e000      	b.n	80009b8 <fsm_setting+0xcc>
			break;
 80009b6:	bf00      	nop
	}

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000a0 	.word	0x200000a0
 80009c0:	40010800 	.word	0x40010800
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000008 	.word	0x20000008

080009d0 <init_display>:
					GPIO_TypeDef *B_GPIOx, uint16_t B_Pin,
					GPIO_TypeDef *C_GPIOx, uint16_t C_Pin,
					GPIO_TypeDef *D_GPIOx, uint16_t D_Pin,
					GPIO_TypeDef *E_GPIOx, uint16_t E_Pin,
					GPIO_TypeDef *F_GPIOx, uint16_t F_Pin,
					GPIO_TypeDef *G_GPIOx, uint16_t G_Pin){
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	461a      	mov	r2, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	817b      	strh	r3, [r7, #10]
 80009e0:	4613      	mov	r3, r2
 80009e2:	813b      	strh	r3, [r7, #8]
	LED_segment.A_seg.SEG_GPIOx = A_GPIOx;
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <init_display+0x74>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6013      	str	r3, [r2, #0]
	LED_segment.A_seg.SEG_Pin = A_Pin;
 80009ea:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <init_display+0x74>)
 80009ec:	897b      	ldrh	r3, [r7, #10]
 80009ee:	8093      	strh	r3, [r2, #4]

	LED_segment.B_seg.SEG_GPIOx = B_GPIOx;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <init_display+0x74>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6093      	str	r3, [r2, #8]
	LED_segment.B_seg.SEG_Pin = B_Pin;
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <init_display+0x74>)
 80009f8:	893b      	ldrh	r3, [r7, #8]
 80009fa:	8193      	strh	r3, [r2, #12]

	LED_segment.C_seg.SEG_GPIOx = C_GPIOx;
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <init_display+0x74>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	6113      	str	r3, [r2, #16]
	LED_segment.C_seg.SEG_Pin = C_Pin;
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <init_display+0x74>)
 8000a04:	8bbb      	ldrh	r3, [r7, #28]
 8000a06:	8293      	strh	r3, [r2, #20]

	LED_segment.D_seg.SEG_GPIOx = D_GPIOx;
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <init_display+0x74>)
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	6193      	str	r3, [r2, #24]
	LED_segment.D_seg.SEG_Pin = D_Pin;
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <init_display+0x74>)
 8000a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a12:	8393      	strh	r3, [r2, #28]

	LED_segment.E_seg.SEG_GPIOx = E_GPIOx;
 8000a14:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <init_display+0x74>)
 8000a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a18:	6213      	str	r3, [r2, #32]
	LED_segment.E_seg.SEG_Pin = E_Pin;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <init_display+0x74>)
 8000a1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a1e:	8493      	strh	r3, [r2, #36]	; 0x24

	LED_segment.F_seg.SEG_GPIOx = F_GPIOx;
 8000a20:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <init_display+0x74>)
 8000a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a24:	6293      	str	r3, [r2, #40]	; 0x28
	LED_segment.F_seg.SEG_Pin = F_Pin;
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <init_display+0x74>)
 8000a28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000a2a:	8593      	strh	r3, [r2, #44]	; 0x2c

	LED_segment.G_seg.SEG_GPIOx = G_GPIOx;
 8000a2c:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <init_display+0x74>)
 8000a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
	LED_segment.G_seg.SEG_Pin = G_Pin;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <init_display+0x74>)
 8000a34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a36:	8693      	strh	r3, [r2, #52]	; 0x34
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000158 	.word	0x20000158

08000a48 <display7SEG>:

void display7SEG(uint8_t A_LED, uint8_t B_LED, uint8_t C_LED, uint8_t D_LED,
				 uint8_t E_LED, uint8_t F_LED, uint8_t G_LED){
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4604      	mov	r4, r0
 8000a50:	4608      	mov	r0, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4623      	mov	r3, r4
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71bb      	strb	r3, [r7, #6]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	717b      	strb	r3, [r7, #5]
 8000a62:	4613      	mov	r3, r2
 8000a64:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_segment.A_seg.SEG_GPIOx, LED_segment.A_seg.SEG_Pin, A_LED);
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <display7SEG+0x98>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <display7SEG+0x98>)
 8000a6c:	8891      	ldrh	r1, [r2, #4]
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f876 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.B_seg.SEG_GPIOx, LED_segment.B_seg.SEG_Pin, B_LED);
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <display7SEG+0x98>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <display7SEG+0x98>)
 8000a7c:	8991      	ldrh	r1, [r2, #12]
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 f86e 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.C_seg.SEG_GPIOx, LED_segment.C_seg.SEG_Pin, C_LED);
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <display7SEG+0x98>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <display7SEG+0x98>)
 8000a8c:	8a91      	ldrh	r1, [r2, #20]
 8000a8e:	797a      	ldrb	r2, [r7, #5]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f866 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.D_seg.SEG_GPIOx, LED_segment.D_seg.SEG_Pin, D_LED);
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <display7SEG+0x98>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <display7SEG+0x98>)
 8000a9c:	8b91      	ldrh	r1, [r2, #28]
 8000a9e:	793a      	ldrb	r2, [r7, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f001 f85e 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.E_seg.SEG_GPIOx, LED_segment.E_seg.SEG_Pin, E_LED);
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <display7SEG+0x98>)
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <display7SEG+0x98>)
 8000aac:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8000aae:	7e3a      	ldrb	r2, [r7, #24]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f856 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.F_seg.SEG_GPIOx, LED_segment.F_seg.SEG_Pin, F_LED);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <display7SEG+0x98>)
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <display7SEG+0x98>)
 8000abc:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8000abe:	7f3a      	ldrb	r2, [r7, #28]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f84e 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_segment.G_seg.SEG_GPIOx, LED_segment.G_seg.SEG_Pin, G_LED);
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <display7SEG+0x98>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <display7SEG+0x98>)
 8000acc:	8e91      	ldrh	r1, [r2, #52]	; 0x34
 8000ace:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f845 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	20000158 	.word	0x20000158

08000ae4 <clear_all_LED>:
void clear_all_LED(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af04      	add	r7, sp, #16
	display7SEG(SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF);
 8000aea:	2301      	movs	r3, #1
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2301      	movs	r3, #1
 8000af8:	2201      	movs	r2, #1
 8000afa:	2101      	movs	r1, #1
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff ffa3 	bl	8000a48 <display7SEG>
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <execute_7SEG_LED>:
void execute_7SEG_LED(SEG_state state){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	switch(state)
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	f200 8099 	bhi.w	8000c4c <execute_7SEG_LED+0x144>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <execute_7SEG_LED+0x18>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b49 	.word	0x08000b49
 8000b24:	08000b63 	.word	0x08000b63
 8000b28:	08000b7d 	.word	0x08000b7d
 8000b2c:	08000b97 	.word	0x08000b97
 8000b30:	08000bb1 	.word	0x08000bb1
 8000b34:	08000bcb 	.word	0x08000bcb
 8000b38:	08000be5 	.word	0x08000be5
 8000b3c:	08000bff 	.word	0x08000bff
 8000b40:	08000c19 	.word	0x08000c19
 8000b44:	08000c33 	.word	0x08000c33
	{
		case ZERO:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_OFF);
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9302      	str	r3, [sp, #8]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	2300      	movs	r3, #0
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2300      	movs	r3, #0
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff ff74 	bl	8000a48 <display7SEG>
			break;
 8000b60:	e074      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case ONE:
			display7SEG(SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF);
 8000b62:	2301      	movs	r3, #1
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2301      	movs	r3, #1
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ff67 	bl	8000a48 <display7SEG>
			break;
 8000b7a:	e067      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case TWO:
			display7SEG(SEG_ON, SEG_ON, SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_ON);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	2301      	movs	r3, #1
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	2300      	movs	r3, #0
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff5a 	bl	8000a48 <display7SEG>
			break;
 8000b94:	e05a      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case THREE:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_ON);
 8000b96:	2300      	movs	r3, #0
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ff4d 	bl	8000a48 <display7SEG>
			break;
 8000bae:	e04d      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case FOUR:
			display7SEG(SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_ON, SEG_ON);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff40 	bl	8000a48 <display7SEG>
			break;
 8000bc8:	e040      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case FIVE:
			display7SEG(SEG_ON, SEG_OFF, SEG_ON, SEG_ON, SEG_OFF, SEG_ON, SEG_ON);
 8000bca:	2300      	movs	r3, #0
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff ff33 	bl	8000a48 <display7SEG>
			break;
 8000be2:	e033      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case SIX:
			display7SEG(SEG_ON, SEG_OFF, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON);
 8000be4:	2300      	movs	r3, #0
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	2300      	movs	r3, #0
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	2300      	movs	r3, #0
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff ff26 	bl	8000a48 <display7SEG>
			break;
 8000bfc:	e026      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case SEVEN:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_OFF, SEG_OFF, SEG_OFF, SEG_OFF);
 8000bfe:	2301      	movs	r3, #1
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	2301      	movs	r3, #1
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff19 	bl	8000a48 <display7SEG>
			break;
 8000c16:	e019      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case EIGHT:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_ON);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f7ff ff0c 	bl	8000a48 <display7SEG>
			break;
 8000c30:	e00c      	b.n	8000c4c <execute_7SEG_LED+0x144>
		case NINE:
			display7SEG(SEG_ON, SEG_ON, SEG_ON, SEG_ON, SEG_OFF, SEG_ON, SEG_ON);
 8000c32:	2300      	movs	r3, #0
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2300      	movs	r3, #0
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	2000      	movs	r0, #0
 8000c46:	f7ff feff 	bl	8000a48 <display7SEG>
			break;
 8000c4a:	bf00      	nop
//		default:
//			break;
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <enableSEG>:
#define DIS GPIO_PIN_SET

static uint8_t state = 0;
uint8_t led_buffer[4] = {0, 0, 0, 0};

void enableSEG(uint8_t EN0, uint8_t EN1, uint8_t EN2, uint8_t EN3){
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	4611      	mov	r1, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	4623      	mov	r3, r4
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	4603      	mov	r3, r0
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	717b      	strb	r3, [r7, #5]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, EN0);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	461a      	mov	r2, r3
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <enableSEG+0x5c>)
 8000c7a:	f000 ff72 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, EN1);
 8000c7e:	79bb      	ldrb	r3, [r7, #6]
 8000c80:	461a      	mov	r2, r3
 8000c82:	2180      	movs	r1, #128	; 0x80
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <enableSEG+0x5c>)
 8000c86:	f000 ff6c 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, EN2);
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <enableSEG+0x5c>)
 8000c94:	f000 ff65 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, EN3);
 8000c98:	793b      	ldrb	r3, [r7, #4]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <enableSEG+0x5c>)
 8000ca2:	f000 ff5e 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010800 	.word	0x40010800

08000cb4 <update_segment_buffer>:
void update_segment_buffer(uint32_t traffic1_time, uint32_t traffic2_time){
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	led_buffer[0] = traffic1_time /10;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <update_segment_buffer+0x68>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	08db      	lsrs	r3, r3, #3
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <update_segment_buffer+0x6c>)
 8000ccc:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = traffic1_time %10;
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <update_segment_buffer+0x68>)
 8000cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8000cd6:	08da      	lsrs	r2, r3, #3
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	1aca      	subs	r2, r1, r3
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <update_segment_buffer+0x6c>)
 8000ce6:	705a      	strb	r2, [r3, #1]

	led_buffer[2] = traffic2_time /10;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <update_segment_buffer+0x68>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	08db      	lsrs	r3, r3, #3
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <update_segment_buffer+0x6c>)
 8000cf6:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = traffic2_time %10;
 8000cf8:	6839      	ldr	r1, [r7, #0]
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <update_segment_buffer+0x68>)
 8000cfc:	fba3 2301 	umull	r2, r3, r3, r1
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	1aca      	subs	r2, r1, r3
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <update_segment_buffer+0x6c>)
 8000d10:	70da      	strb	r2, [r3, #3]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	cccccccd 	.word	0xcccccccd
 8000d20:	200000a4 	.word	0x200000a4

08000d24 <scan_led7_segment>:
void scan_led7_segment(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	switch(state){
 8000d28:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <scan_led7_segment+0xb0>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d84f      	bhi.n	8000dd0 <scan_led7_segment+0xac>
 8000d30:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <scan_led7_segment+0x14>)
 8000d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d36:	bf00      	nop
 8000d38:	08000d49 	.word	0x08000d49
 8000d3c:	08000d6b 	.word	0x08000d6b
 8000d40:	08000d8d 	.word	0x08000d8d
 8000d44:	08000daf 	.word	0x08000daf
		case 0:
			clear_all_LED();
 8000d48:	f7ff fecc 	bl	8000ae4 <clear_all_LED>
			enableSEG(EN, DIS, DIS, DIS);
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	2201      	movs	r2, #1
 8000d50:	2101      	movs	r1, #1
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff7e 	bl	8000c54 <enableSEG>
			execute_7SEG_LED(led_buffer[0]);
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <scan_led7_segment+0xb4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fed3 	bl	8000b08 <execute_7SEG_LED>
			state = 1;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <scan_led7_segment+0xb0>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
			break;
 8000d68:	e032      	b.n	8000dd0 <scan_led7_segment+0xac>
		case 1:
			clear_all_LED();
 8000d6a:	f7ff febb 	bl	8000ae4 <clear_all_LED>
			enableSEG(DIS, EN, DIS, DIS);
 8000d6e:	2301      	movs	r3, #1
 8000d70:	2201      	movs	r2, #1
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ff6d 	bl	8000c54 <enableSEG>
			execute_7SEG_LED(led_buffer[1]);
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <scan_led7_segment+0xb4>)
 8000d7c:	785b      	ldrb	r3, [r3, #1]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fec2 	bl	8000b08 <execute_7SEG_LED>
			state = 2;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <scan_led7_segment+0xb0>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	701a      	strb	r2, [r3, #0]
			break;
 8000d8a:	e021      	b.n	8000dd0 <scan_led7_segment+0xac>
		case 2:
			clear_all_LED();
 8000d8c:	f7ff feaa 	bl	8000ae4 <clear_all_LED>
			enableSEG(DIS, DIS, EN, DIS);
 8000d90:	2301      	movs	r3, #1
 8000d92:	2200      	movs	r2, #0
 8000d94:	2101      	movs	r1, #1
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ff5c 	bl	8000c54 <enableSEG>
			execute_7SEG_LED(led_buffer[2]);
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <scan_led7_segment+0xb4>)
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff feb1 	bl	8000b08 <execute_7SEG_LED>
			state = 3;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <scan_led7_segment+0xb0>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]
			break;
 8000dac:	e010      	b.n	8000dd0 <scan_led7_segment+0xac>
		case 3:
			clear_all_LED();
 8000dae:	f7ff fe99 	bl	8000ae4 <clear_all_LED>
			enableSEG(DIS, DIS, DIS, EN);
 8000db2:	2300      	movs	r3, #0
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ff4b 	bl	8000c54 <enableSEG>
			execute_7SEG_LED(led_buffer[3]);
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <scan_led7_segment+0xb4>)
 8000dc0:	78db      	ldrb	r3, [r3, #3]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fea0 	bl	8000b08 <execute_7SEG_LED>
			state = 0;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <scan_led7_segment+0xb0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
			break;
 8000dce:	bf00      	nop

	}
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000a1 	.word	0x200000a1
 8000dd8:	200000a4 	.word	0x200000a4

08000ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d105      	bne.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x20>
			timeRun();
 8000df0:	f000 f98a 	bl	8001108 <timeRun>
			getInputKey();
 8000df4:	f7ff fb06 	bl	8000404 <getInputKey>
			SCH_Update();
 8000df8:	f7ff fa38 	bl	800026c <SCH_Update>
		}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000194 	.word	0x20000194

08000e08 <Blink_LED>:



void Blink_LED(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <Blink_LED+0x10>)
 8000e10:	f000 febf 	bl	8001b92 <HAL_GPIO_TogglePin>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010800 	.word	0x40010800

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e22:	f000 fb9d 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 f853 	bl	8000ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f000 f8d9 	bl	8000fe0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e2e:	f000 f88b 	bl	8000f48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e32:	4820      	ldr	r0, [pc, #128]	; (8000eb4 <main+0x98>)
 8000e34:	f001 faf2 	bl	800241c <HAL_TIM_Base_Start_IT>
  init_display(SEG0_GPIO_Port, SEG0_Pin,
 8000e38:	2340      	movs	r3, #64	; 0x40
 8000e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <main+0x9c>)
 8000e3e:	9308      	str	r3, [sp, #32]
 8000e40:	2320      	movs	r3, #32
 8000e42:	9307      	str	r3, [sp, #28]
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <main+0x9c>)
 8000e46:	9306      	str	r3, [sp, #24]
 8000e48:	2310      	movs	r3, #16
 8000e4a:	9305      	str	r3, [sp, #20]
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <main+0x9c>)
 8000e4e:	9304      	str	r3, [sp, #16]
 8000e50:	2308      	movs	r3, #8
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <main+0x9c>)
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2304      	movs	r3, #4
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <main+0x9c>)
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2302      	movs	r3, #2
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <main+0x9c>)
 8000e64:	2101      	movs	r1, #1
 8000e66:	4814      	ldr	r0, [pc, #80]	; (8000eb8 <main+0x9c>)
 8000e68:	f7ff fdb2 	bl	80009d0 <init_display>
   			   SEG2_GPIO_Port, SEG2_Pin,
   			   SEG3_GPIO_Port, SEG3_Pin,
   			   SEG4_GPIO_Port, SEG4_Pin,
   			   SEG5_GPIO_Port, SEG5_Pin,
   			   SEG6_GPIO_Port, SEG6_Pin);
  setTimer(0,100);
 8000e6c:	2164      	movs	r1, #100	; 0x64
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f92c 	bl	80010cc <setTimer>
  SCH_Init();
 8000e74:	f7ff f96a 	bl	800014c <SCH_Init>
  // add Blink LED function
  SCH_Add_Task(&Blink_LED, 0, 300);
 8000e78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <main+0xa0>)
 8000e80:	f7ff f972 	bl	8000168 <SCH_Add_Task>
  // add automatic mode
  SCH_Add_Task(&fsm_automatic, 0, 10);
 8000e84:	220a      	movs	r2, #10
 8000e86:	2100      	movs	r1, #0
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <main+0xa4>)
 8000e8a:	f7ff f96d 	bl	8000168 <SCH_Add_Task>
  // add manual mode
  SCH_Add_Task(&fsm_manual, 0, 10);
 8000e8e:	220a      	movs	r2, #10
 8000e90:	2100      	movs	r1, #0
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <main+0xa8>)
 8000e94:	f7ff f968 	bl	8000168 <SCH_Add_Task>
  //add setting mode
  SCH_Add_Task(&fsm_setting, 0, 30);
 8000e98:	221e      	movs	r2, #30
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <main+0xac>)
 8000e9e:	f7ff f963 	bl	8000168 <SCH_Add_Task>
  // add scan segment
  SCH_Add_Task(&scan_led7_segment, 0, 100);
 8000ea2:	2264      	movs	r2, #100	; 0x64
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <main+0xb0>)
 8000ea8:	f7ff f95e 	bl	8000168 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000eac:	f7ff fa06 	bl	80002bc <SCH_Dispatch_Tasks>
 8000eb0:	e7fc      	b.n	8000eac <main+0x90>
 8000eb2:	bf00      	nop
 8000eb4:	20000194 	.word	0x20000194
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	08000e09 	.word	0x08000e09
 8000ec0:	08000501 	.word	0x08000501
 8000ec4:	08000701 	.word	0x08000701
 8000ec8:	080008ed 	.word	0x080008ed
 8000ecc:	08000d25 	.word	0x08000d25

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b090      	sub	sp, #64	; 0x40
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	2228      	movs	r2, #40	; 0x28
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fe62 	bl	8002ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efa:	2310      	movs	r3, #16
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fe5c 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f12:	f000 f8d5 	bl	80010c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 f8c8 	bl	80020c4 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 f8c1 	bl	80010c0 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3740      	adds	r7, #64	; 0x40
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f6e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f7c:	2209      	movs	r2, #9
 8000f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8c:	4813      	ldr	r0, [pc, #76]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000f8e:	f001 f9f5 	bl	800237c <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f98:	f000 f892 	bl	80010c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000faa:	f001 fb73 	bl	8002694 <HAL_TIM_ConfigClockSource>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 f884 	bl	80010c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_TIM2_Init+0x94>)
 8000fc6:	f001 fd4b 	bl	8002a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fd0:	f000 f876 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000194 	.word	0x20000194

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <MX_GPIO_Init+0xd4>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <MX_GPIO_Init+0xd4>)
 8000ffa:	f043 0320 	orr.w	r3, r3, #32
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MX_GPIO_Init+0xd4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_GPIO_Init+0xd4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <MX_GPIO_Init+0xd4>)
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_GPIO_Init+0xd4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_GPIO_Init+0xd4>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <MX_GPIO_Init+0xd4>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_GPIO_Init+0xd4>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLINK_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001042:	481d      	ldr	r0, [pc, #116]	; (80010b8 <MX_GPIO_Init+0xd8>)
 8001044:	f000 fd8d 	bl	8001b62 <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_GREEN_LR_Pin
 8001048:	2200      	movs	r2, #0
 800104a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800104e:	481b      	ldr	r0, [pc, #108]	; (80010bc <MX_GPIO_Init+0xdc>)
 8001050:	f000 fd87 	bl	8001b62 <HAL_GPIO_WritePin>
                          |SEG5_Pin|SEG6_Pin|LED_GREEN_AL_Pin|LED_YELLOW_AL_Pin
                          |LED_RED_AL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLINK_LED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = BLINK_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8001054:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001058:	613b      	str	r3, [r7, #16]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <MX_GPIO_Init+0xd8>)
 800106e:	f000 fbe7 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin LED_GREEN_LR_Pin
                           LED_YELLOW_LR_Pin LED_RED_LR_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin LED_GREEN_AL_Pin LED_YELLOW_AL_Pin
                           LED_RED_AL_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|LED_GREEN_LR_Pin
 8001072:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001076:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_LR_Pin|LED_RED_LR_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|LED_GREEN_AL_Pin|LED_YELLOW_AL_Pin
                          |LED_RED_AL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <MX_GPIO_Init+0xdc>)
 800108c:	f000 fbd8 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001090:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0xd8>)
 80010a6:	f000 fbcb 	bl	8001840 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <setTimer>:

// khoi tao cac bien cho cac sotware timer
static uint32_t timer_counter[NO_OF_TIMER];
static uint8_t timer_flag[NO_OF_TIMER];

void setTimer(uint32_t index, uint32_t counter){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = counter/TICK;  // chia cho TICK de dam bao rang 1 second = 1000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <setTimer+0x30>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <setTimer+0x34>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <setTimer+0x38>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	cccccccd 	.word	0xcccccccd
 8001100:	200000a8 	.word	0x200000a8
 8001104:	200000d0 	.word	0x200000d0

08001108 <timeRun>:

void timeRun(){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < NO_OF_TIMER; i++){
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	e016      	b.n	8001142 <timeRun+0x3a>
		if(timer_counter[i] >= 0){
			timer_counter[i]--;
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <timeRun+0x4c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <timeRun+0x4c>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <timeRun+0x4c>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <timeRun+0x34>
				timer_flag[i] = 1;
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <timeRun+0x50>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4413      	add	r3, r2
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
	for(uint32_t i = 0; i < NO_OF_TIMER; i++){
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3301      	adds	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b09      	cmp	r3, #9
 8001146:	d9e5      	bls.n	8001114 <timeRun+0xc>
			}
		}
	}
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	200000a8 	.word	0x200000a8
 8001158:	200000d0 	.word	0x200000d0

0800115c <getTimerFlag>:

uint8_t getTimerFlag(uint32_t index){
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	return timer_flag[index];
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <getTimerFlag+0x1c>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200000d0 	.word	0x200000d0

0800117c <setTimerFlag>:
void setTimerFlag(uint32_t index, uint8_t value){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	timer_flag[index] = value;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <setTimerFlag+0x20>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	701a      	strb	r2, [r3, #0]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	200000d0 	.word	0x200000d0

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_MspInit+0x5c>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <HAL_MspInit+0x5c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6193      	str	r3, [r2, #24]
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_MspInit+0x5c>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x5c>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x5c>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x5c>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_MspInit+0x60>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4a04      	ldr	r2, [pc, #16]	; (8001200 <HAL_MspInit+0x60>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000

08001204 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001214:	d113      	bne.n	800123e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_TIM_Base_MspInit+0x44>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_TIM_Base_MspInit+0x44>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	61d3      	str	r3, [r2, #28]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_TIM_Base_MspInit+0x44>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2101      	movs	r1, #1
 8001232:	201c      	movs	r0, #28
 8001234:	f000 facd 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001238:	201c      	movs	r0, #28
 800123a:	f000 fae6 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f000 f9ab 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f001 f907 	bl	80024b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000194 	.word	0x20000194

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f001 fc28 	bl	8002b34 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20002800 	.word	0x20002800
 8001310:	00000400 	.word	0x00000400
 8001314:	200000dc 	.word	0x200000dc
 8001318:	200001f0 	.word	0x200001f0

0800131c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <display_led_traffic>:
#define ON	GPIO_PIN_SET
#define OFF GPIO_PIN_RESET


void display_led_traffic(uint8_t green_al, uint8_t yellow_al, uint8_t red_al,
		 	 	 	 	 uint8_t green_lf, uint8_t yellow_lf, uint8_t red_lf){
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
	//above and low
	HAL_GPIO_WritePin(LED_GREEN_AL_GPIO_Port, LED_GREEN_AL_Pin, green_al);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	461a      	mov	r2, r3
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <display_led_traffic+0x78>)
 800134e:	f000 fc08 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_AL_GPIO_Port, LED_YELLOW_AL_Pin, yellow_al);
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <display_led_traffic+0x78>)
 800135c:	f000 fc01 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_AL_GPIO_Port, LED_RED_AL_Pin, red_al);
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	461a      	mov	r2, r3
 8001364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <display_led_traffic+0x78>)
 800136a:	f000 fbfa 	bl	8001b62 <HAL_GPIO_WritePin>
	// left and right
	HAL_GPIO_WritePin(LED_GREEN_LR_GPIO_Port, LED_GREEN_LR_Pin, green_lf);
 800136e:	793b      	ldrb	r3, [r7, #4]
 8001370:	461a      	mov	r2, r3
 8001372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <display_led_traffic+0x78>)
 8001378:	f000 fbf3 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_LR_GPIO_Port, LED_YELLOW_LR_Pin, yellow_lf);
 800137c:	7e3b      	ldrb	r3, [r7, #24]
 800137e:	461a      	mov	r2, r3
 8001380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <display_led_traffic+0x78>)
 8001386:	f000 fbec 	bl	8001b62 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_LR_GPIO_Port, LED_RED_LR_Pin, red_lf);
 800138a:	7f3b      	ldrb	r3, [r7, #28]
 800138c:	461a      	mov	r2, r3
 800138e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <display_led_traffic+0x78>)
 8001394:	f000 fbe5 	bl	8001b62 <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bd90      	pop	{r4, r7, pc}
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <led_red_and_green>:


void led_red_and_green(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af02      	add	r7, sp, #8

	display_led_traffic(OFF, OFF, ON,
 80013aa:	2300      	movs	r3, #0
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2300      	movs	r3, #0
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2201      	movs	r2, #1
 80013b6:	2100      	movs	r1, #0
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ffb5 	bl	8001328 <display_led_traffic>
						ON, OFF, OFF);
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <led_red_and_yellow>:

void led_red_and_yellow(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	display_led_traffic(OFF, OFF, ON,
 80013ca:	2300      	movs	r3, #0
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2301      	movs	r3, #1
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	2201      	movs	r2, #1
 80013d6:	2100      	movs	r1, #0
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff ffa5 	bl	8001328 <display_led_traffic>
						OFF, ON, OFF);
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <led_green_and_red>:

void led_green_and_red(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af02      	add	r7, sp, #8
	display_led_traffic(ON, OFF, OFF,
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	2300      	movs	r3, #0
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2300      	movs	r3, #0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff ff95 	bl	8001328 <display_led_traffic>
						OFF, OFF, ON);
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <led_yellow_and_red>:

void led_yellow_and_red(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af02      	add	r7, sp, #8
	display_led_traffic(OFF, ON, OFF,
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2200      	movs	r2, #0
 8001416:	2101      	movs	r1, #1
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff ff85 	bl	8001328 <display_led_traffic>
						OFF, OFF, ON);
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <toggle_led_red>:

#define HIGH 1
#define LOW 0

uint8_t toggle = HIGH;
void toggle_led_red(){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af02      	add	r7, sp, #8
	if(toggle == HIGH){
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <toggle_led_red+0x4c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d10d      	bne.n	800144e <toggle_led_red+0x2a>
		display_led_traffic(OFF, OFF, ON,
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2300      	movs	r3, #0
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2201      	movs	r2, #1
 800143e:	2100      	movs	r1, #0
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff71 	bl	8001328 <display_led_traffic>
							OFF, OFF, ON);
		// toggle state
		toggle = LOW;
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <toggle_led_red+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
							OFF, OFF, OFF);
		// toggle state
		toggle = HIGH;
	}

}
 800144c:	e00c      	b.n	8001468 <toggle_led_red+0x44>
		display_led_traffic(OFF, OFF, OFF,
 800144e:	2300      	movs	r3, #0
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	2300      	movs	r3, #0
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff ff63 	bl	8001328 <display_led_traffic>
		toggle = HIGH;
 8001462:	4b03      	ldr	r3, [pc, #12]	; (8001470 <toggle_led_red+0x4c>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000010 	.word	0x20000010

08001474 <toggle_led_yellow>:
void toggle_led_yellow(){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af02      	add	r7, sp, #8
	if(toggle == HIGH){
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <toggle_led_yellow+0x4c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10d      	bne.n	800149e <toggle_led_yellow+0x2a>
		display_led_traffic(OFF, ON, OFF,
 8001482:	2300      	movs	r3, #0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2301      	movs	r3, #1
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ff49 	bl	8001328 <display_led_traffic>
							OFF, ON, OFF);
		// toggle state
		toggle = LOW;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <toggle_led_yellow+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
		display_led_traffic(OFF, OFF, OFF,
							OFF, OFF, OFF);
		// toggle state
		toggle = HIGH;
	}
}
 800149c:	e00c      	b.n	80014b8 <toggle_led_yellow+0x44>
		display_led_traffic(OFF, OFF, OFF,
 800149e:	2300      	movs	r3, #0
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ff3b 	bl	8001328 <display_led_traffic>
		toggle = HIGH;
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <toggle_led_yellow+0x4c>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000010 	.word	0x20000010

080014c4 <toggle_led_green>:
void toggle_led_green(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af02      	add	r7, sp, #8
	if(toggle == HIGH){
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <toggle_led_green+0x4c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d10d      	bne.n	80014ee <toggle_led_green+0x2a>
		display_led_traffic(ON, OFF, OFF,
 80014d2:	2300      	movs	r3, #0
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	2300      	movs	r3, #0
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff ff21 	bl	8001328 <display_led_traffic>
							ON, OFF, OFF);
		// toggle state
		toggle = LOW;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <toggle_led_green+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
		display_led_traffic(OFF, OFF, OFF,
							OFF, OFF, OFF);
		// toggle state
		toggle = HIGH;
	}
}
 80014ec:	e00c      	b.n	8001508 <toggle_led_green+0x44>
		display_led_traffic(OFF, OFF, OFF,
 80014ee:	2300      	movs	r3, #0
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2300      	movs	r3, #0
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff ff13 	bl	8001328 <display_led_traffic>
		toggle = HIGH;
 8001502:	4b03      	ldr	r3, [pc, #12]	; (8001510 <toggle_led_green+0x4c>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000010 	.word	0x20000010

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff ff02 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151a:	490c      	ldr	r1, [pc, #48]	; (800154c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001530:	4c09      	ldr	r4, [pc, #36]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f001 faff 	bl	8002b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fc6b 	bl	8000e1c <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001550:	08002d84 	.word	0x08002d84
  ldr r2, =_sbss
 8001554:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001558:	200001f0 	.word	0x200001f0

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f923 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fe10 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f93b 	bl	8001826 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f903 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000018 	.word	0x20000018
 80015e8:	20000014 	.word	0x20000014

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000018 	.word	0x20000018
 800160c:	200001dc 	.word	0x200001dc

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	200001dc 	.word	0x200001dc

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <__NVIC_EnableIRQ+0x34>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff90 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff2d 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff42 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff35 	bl	8001688 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e148      	b.n	8001ae6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001854:	2201      	movs	r2, #1
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8137 	bne.w	8001ae0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4aa3      	ldr	r2, [pc, #652]	; (8001b04 <HAL_GPIO_Init+0x2c4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d05e      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 800187c:	4aa1      	ldr	r2, [pc, #644]	; (8001b04 <HAL_GPIO_Init+0x2c4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d875      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 8001882:	4aa1      	ldr	r2, [pc, #644]	; (8001b08 <HAL_GPIO_Init+0x2c8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d058      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001888:	4a9f      	ldr	r2, [pc, #636]	; (8001b08 <HAL_GPIO_Init+0x2c8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d86f      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800188e:	4a9f      	ldr	r2, [pc, #636]	; (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d052      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001894:	4a9d      	ldr	r2, [pc, #628]	; (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d869      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800189a:	4a9d      	ldr	r2, [pc, #628]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04c      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018a0:	4a9b      	ldr	r2, [pc, #620]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d863      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018a6:	4a9b      	ldr	r2, [pc, #620]	; (8001b14 <HAL_GPIO_Init+0x2d4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d046      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018ac:	4a99      	ldr	r2, [pc, #612]	; (8001b14 <HAL_GPIO_Init+0x2d4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d85d      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d82a      	bhi.n	800190c <HAL_GPIO_Init+0xcc>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d859      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_GPIO_Init+0x80>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001927 	.word	0x08001927
 80018cc:	08001969 	.word	0x08001969
 80018d0:	0800196f 	.word	0x0800196f
 80018d4:	0800196f 	.word	0x0800196f
 80018d8:	0800196f 	.word	0x0800196f
 80018dc:	0800196f 	.word	0x0800196f
 80018e0:	0800196f 	.word	0x0800196f
 80018e4:	0800196f 	.word	0x0800196f
 80018e8:	0800196f 	.word	0x0800196f
 80018ec:	0800196f 	.word	0x0800196f
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	0800196f 	.word	0x0800196f
 80018fc:	0800196f 	.word	0x0800196f
 8001900:	0800196f 	.word	0x0800196f
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001931 	.word	0x08001931
 800190c:	4a82      	ldr	r2, [pc, #520]	; (8001b18 <HAL_GPIO_Init+0x2d8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001912:	e02c      	b.n	800196e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e029      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e024      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	3308      	adds	r3, #8
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e01f      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	330c      	adds	r3, #12
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e01a      	b.n	8001970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001942:	2304      	movs	r3, #4
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e013      	b.n	8001970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	611a      	str	r2, [r3, #16]
          break;
 800195a:	e009      	b.n	8001970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	615a      	str	r2, [r3, #20]
          break;
 8001966:	e003      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x130>
          break;
 800196e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d801      	bhi.n	800197a <HAL_GPIO_Init+0x13a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	e001      	b.n	800197e <HAL_GPIO_Init+0x13e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d802      	bhi.n	800198c <HAL_GPIO_Init+0x14c>
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x152>
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3b08      	subs	r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	210f      	movs	r1, #15
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8090 	beq.w	8001ae0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_GPIO_Init+0x2dc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d8:	4a51      	ldr	r2, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x2e0>)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <HAL_GPIO_Init+0x2e4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00d      	beq.n	8001a20 <HAL_GPIO_Init+0x1e0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a48      	ldr	r2, [pc, #288]	; (8001b28 <HAL_GPIO_Init+0x2e8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d007      	beq.n	8001a1c <HAL_GPIO_Init+0x1dc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a47      	ldr	r2, [pc, #284]	; (8001b2c <HAL_GPIO_Init+0x2ec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_GPIO_Init+0x1d8>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x1e2>
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x1e2>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x1e2>
 8001a20:	2300      	movs	r3, #0
 8001a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a32:	493b      	ldr	r1, [pc, #236]	; (8001b20 <HAL_GPIO_Init+0x2e0>)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b35      	ldr	r3, [pc, #212]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4933      	ldr	r1, [pc, #204]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	492d      	ldr	r1, [pc, #180]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4929      	ldr	r1, [pc, #164]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4923      	ldr	r1, [pc, #140]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	491f      	ldr	r1, [pc, #124]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4919      	ldr	r1, [pc, #100]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4915      	ldr	r1, [pc, #84]	; (8001b30 <HAL_GPIO_Init+0x2f0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f47f aeaf 	bne.w	8001854 <HAL_GPIO_Init+0x14>
  }
}
 8001af6:	bf00      	nop
 8001af8:	bf00      	nop
 8001afa:	372c      	adds	r7, #44	; 0x2c
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	10320000 	.word	0x10320000
 8001b08:	10310000 	.word	0x10310000
 8001b0c:	10220000 	.word	0x10220000
 8001b10:	10210000 	.word	0x10210000
 8001b14:	10120000 	.word	0x10120000
 8001b18:	10110000 	.word	0x10110000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	40011000 	.word	0x40011000
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e001      	b.n	8001b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b72:	787b      	ldrb	r3, [r7, #1]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b78:	887a      	ldrh	r2, [r7, #2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	041a      	lsls	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba4:	887a      	ldrh	r2, [r7, #2]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	041a      	lsls	r2, r3, #16
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e26c      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8087 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be4:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d00c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d112      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5e>
 8001bfc:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c08:	d10b      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0a:	4b89      	ldr	r3, [pc, #548]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d06c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x12c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d168      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e246      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x76>
 8001c2c:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a7f      	ldr	r2, [pc, #508]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e02e      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x98>
 8001c42:	4b7b      	ldr	r3, [pc, #492]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7a      	ldr	r2, [pc, #488]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a77      	ldr	r2, [pc, #476]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xbc>
 8001c66:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a71      	ldr	r2, [pc, #452]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6e      	ldr	r2, [pc, #440]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xd4>
 8001c80:	4b6b      	ldr	r3, [pc, #428]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a67      	ldr	r2, [pc, #412]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fcb6 	bl	8001610 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fcb2 	bl	8001610 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1fa      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xe4>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fca2 	bl	8001610 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fc9e 	bl	8001610 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e1e6      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x10c>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d11c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x18c>
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d116      	bne.n	8001d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1ba      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4939      	ldr	r1, [pc, #228]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4e:	e03a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d58:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fc57 	bl	8001610 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff fc53 	bl	8001610 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e19b      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4927      	ldr	r1, [pc, #156]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fc36 	bl	8001610 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da8:	f7ff fc32 	bl	8001610 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e17a      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d03a      	beq.n	8001e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d019      	beq.n	8001e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de0:	f7ff fc16 	bl	8001610 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff fc12 	bl	8001610 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e15a      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f000 fa9a 	bl	8002340 <RCC_Delay>
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7ff fbfc 	bl	8001610 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1a:	e00f      	b.n	8001e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fbf8 	bl	8001610 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d908      	bls.n	8001e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e140      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	42420000 	.word	0x42420000
 8001e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b9e      	ldr	r3, [pc, #632]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e9      	bne.n	8001e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80a6 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b97      	ldr	r3, [pc, #604]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b94      	ldr	r3, [pc, #592]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a93      	ldr	r2, [pc, #588]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b8e      	ldr	r3, [pc, #568]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a8a      	ldr	r2, [pc, #552]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fbb9 	bl	8001610 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7ff fbb5 	bl	8001610 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0fd      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b81      	ldr	r3, [pc, #516]	; (80020bc <HAL_RCC_OscConfig+0x4f8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x312>
 8001ec8:	4b7b      	ldr	r3, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	4a7a      	ldr	r2, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6213      	str	r3, [r2, #32]
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x334>
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a72      	ldr	r2, [pc, #456]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6213      	str	r3, [r2, #32]
 8001ef6:	e01c      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x356>
 8001f00:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a6c      	ldr	r2, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d015      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fb69 	bl	8001610 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fb65 	bl	8001610 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0ab      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RCC_OscConfig+0x37e>
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7ff fb53 	bl	8001610 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff fb4f 	bl	8001610 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e095      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b48      	ldr	r3, [pc, #288]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8081 	beq.w	80020ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	4b42      	ldr	r3, [pc, #264]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d061      	beq.n	800207c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d146      	bne.n	800204e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b3f      	ldr	r3, [pc, #252]	; (80020c0 <HAL_RCC_OscConfig+0x4fc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fb23 	bl	8001610 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff fb1f 	bl	8001610 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e067      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d108      	bne.n	8002008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	492d      	ldr	r1, [pc, #180]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a19      	ldr	r1, [r3, #32]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	430b      	orrs	r3, r1
 800201a:	4927      	ldr	r1, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_RCC_OscConfig+0x4fc>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7ff faf3 	bl	8001610 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff faef 	bl	8001610 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e037      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x46a>
 800204c:	e02f      	b.n	80020ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_RCC_OscConfig+0x4fc>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fadc 	bl	8001610 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff fad8 	bl	8001610 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e020      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x498>
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e013      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42420060 	.word	0x42420060

080020c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0d0      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d910      	bls.n	8002108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4965      	ldr	r1, [pc, #404]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0b8      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002120:	4b59      	ldr	r3, [pc, #356]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800212a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002138:	4b53      	ldr	r3, [pc, #332]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002144:	4b50      	ldr	r3, [pc, #320]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	494d      	ldr	r1, [pc, #308]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d040      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	4b47      	ldr	r3, [pc, #284]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d115      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e07f      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b41      	ldr	r3, [pc, #260]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e073      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4b3d      	ldr	r3, [pc, #244]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e06b      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4936      	ldr	r1, [pc, #216]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b4:	f7ff fa2c 	bl	8001610 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7ff fa28 	bl	8001610 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e053      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d210      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 0207 	bic.w	r2, r3, #7
 80021fa:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e032      	b.n	800227a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002220:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4916      	ldr	r1, [pc, #88]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	490e      	ldr	r1, [pc, #56]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002252:	f000 f821 	bl	8002298 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490a      	ldr	r1, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1cc>)
 800226c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1d0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f98a 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000
 8002288:	40021000 	.word	0x40021000
 800228c:	08002d58 	.word	0x08002d58
 8002290:	2000000c 	.word	0x2000000c
 8002294:	20000014 	.word	0x20000014

08002298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	2300      	movs	r3, #0
 80022ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_GetSysClockFreq+0x94>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x30>
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x36>
 80022c6:	e027      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ca:	613b      	str	r3, [r7, #16]
      break;
 80022cc:	e027      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	0c9b      	lsrs	r3, r3, #18
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d8:	5cd3      	ldrb	r3, [r2, r3]
 80022da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d010      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_GetSysClockFreq+0x94>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0c5b      	lsrs	r3, r3, #17
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fa:	fb02 f203 	mul.w	r2, r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e004      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HAL_RCC_GetSysClockFreq+0xa4>)
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	613b      	str	r3, [r7, #16]
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetSysClockFreq+0x98>)
 800231a:	613b      	str	r3, [r7, #16]
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	693b      	ldr	r3, [r7, #16]
}
 8002320:	4618      	mov	r0, r3
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	007a1200 	.word	0x007a1200
 8002334:	08002d68 	.word	0x08002d68
 8002338:	08002d78 	.word	0x08002d78
 800233c:	003d0900 	.word	0x003d0900

08002340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002348:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <RCC_Delay+0x34>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <RCC_Delay+0x38>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0a5b      	lsrs	r3, r3, #9
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800235c:	bf00      	nop
  }
  while (Delay --);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	60fa      	str	r2, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <RCC_Delay+0x1c>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	2000000c 	.word	0x2000000c
 8002378:	10624dd3 	.word	0x10624dd3

0800237c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e041      	b.n	8002412 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe ff2e 	bl	8001204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3304      	adds	r3, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f000 fa56 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d001      	beq.n	8002434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e035      	b.n	80024a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_Base_Start_IT+0x90>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x4e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245e:	d004      	beq.n	800246a <HAL_TIM_Base_Start_IT+0x4e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d111      	bne.n	800248e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b06      	cmp	r3, #6
 800247a:	d010      	beq.n	800249e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248c:	e007      	b.n	800249e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d020      	beq.n	8002518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f998 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f98b 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f99a 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0204 	mvn.w	r2, #4
 8002534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f972 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f965 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f974 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f94c 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f93f 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f94e 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0210 	mvn.w	r2, #16
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2208      	movs	r2, #8
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f926 	bl	8002834 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f919 	bl	8002822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f928 	bl	8002846 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0201 	mvn.w	r2, #1
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fbde 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa6f 	bl	8002b22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8f8 	bl	8002858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0220 	mvn.w	r2, #32
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa42 	bl	8002b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_TIM_ConfigClockSource+0x1c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e0b4      	b.n	800281a <HAL_TIM_ConfigClockSource+0x186>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e8:	d03e      	beq.n	8002768 <HAL_TIM_ConfigClockSource+0xd4>
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ee:	f200 8087 	bhi.w	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f6:	f000 8086 	beq.w	8002806 <HAL_TIM_ConfigClockSource+0x172>
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fe:	d87f      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b70      	cmp	r3, #112	; 0x70
 8002702:	d01a      	beq.n	800273a <HAL_TIM_ConfigClockSource+0xa6>
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d87b      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b60      	cmp	r3, #96	; 0x60
 800270a:	d050      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x11a>
 800270c:	2b60      	cmp	r3, #96	; 0x60
 800270e:	d877      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b50      	cmp	r3, #80	; 0x50
 8002712:	d03c      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xfa>
 8002714:	2b50      	cmp	r3, #80	; 0x50
 8002716:	d873      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b40      	cmp	r3, #64	; 0x40
 800271a:	d058      	beq.n	80027ce <HAL_TIM_ConfigClockSource+0x13a>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d86f      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b30      	cmp	r3, #48	; 0x30
 8002722:	d064      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d86b      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b20      	cmp	r3, #32
 800272a:	d060      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d867      	bhi.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05c      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d05a      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	e062      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6899      	ldr	r1, [r3, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f000 f96a 	bl	8002a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800275c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	609a      	str	r2, [r3, #8]
      break;
 8002766:	e04f      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6899      	ldr	r1, [r3, #8]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f000 f953 	bl	8002a22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278a:	609a      	str	r2, [r3, #8]
      break;
 800278c:	e03c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	461a      	mov	r2, r3
 800279c:	f000 f8ca 	bl	8002934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2150      	movs	r1, #80	; 0x50
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f921 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027ac:	e02c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	461a      	mov	r2, r3
 80027bc:	f000 f8e8 	bl	8002990 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2160      	movs	r1, #96	; 0x60
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f911 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027cc:	e01c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6859      	ldr	r1, [r3, #4]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	f000 f8aa 	bl	8002934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2140      	movs	r1, #64	; 0x40
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f901 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027ec:	e00c      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f000 f8f8 	bl	80029ee <TIM_ITRx_SetConfig>
      break;
 80027fe:	e003      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e000      	b.n	8002808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
	...

0800286c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a2b      	ldr	r2, [pc, #172]	; (800292c <TIM_Base_SetConfig+0xc0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x28>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x28>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <TIM_Base_SetConfig+0xc4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d108      	bne.n	80028a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <TIM_Base_SetConfig+0xc0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <TIM_Base_SetConfig+0x52>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d003      	beq.n	80028be <TIM_Base_SetConfig+0x52>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	; (8002930 <TIM_Base_SetConfig+0xc4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d108      	bne.n	80028d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0d      	ldr	r2, [pc, #52]	; (800292c <TIM_Base_SetConfig+0xc0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f023 0201 	bic.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]
  }
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400

08002934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f023 0201 	bic.w	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800295e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f023 030a 	bic.w	r3, r3, #10
 8002970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f023 0210 	bic.w	r2, r3, #16
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	031b      	lsls	r3, r3, #12
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	621a      	str	r2, [r3, #32]
}
 80029e4:	bf00      	nop
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f043 0307 	orr.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	021a      	lsls	r2, r3, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	609a      	str	r2, [r3, #8]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e041      	b.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10c      	bne.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400

08002b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <__errno>:
 8002b34:	4b01      	ldr	r3, [pc, #4]	; (8002b3c <__errno+0x8>)
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000001c 	.word	0x2000001c

08002b40 <__libc_init_array>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	2600      	movs	r6, #0
 8002b44:	4d0c      	ldr	r5, [pc, #48]	; (8002b78 <__libc_init_array+0x38>)
 8002b46:	4c0d      	ldr	r4, [pc, #52]	; (8002b7c <__libc_init_array+0x3c>)
 8002b48:	1b64      	subs	r4, r4, r5
 8002b4a:	10a4      	asrs	r4, r4, #2
 8002b4c:	42a6      	cmp	r6, r4
 8002b4e:	d109      	bne.n	8002b64 <__libc_init_array+0x24>
 8002b50:	f000 f8f6 	bl	8002d40 <_init>
 8002b54:	2600      	movs	r6, #0
 8002b56:	4d0a      	ldr	r5, [pc, #40]	; (8002b80 <__libc_init_array+0x40>)
 8002b58:	4c0a      	ldr	r4, [pc, #40]	; (8002b84 <__libc_init_array+0x44>)
 8002b5a:	1b64      	subs	r4, r4, r5
 8002b5c:	10a4      	asrs	r4, r4, #2
 8002b5e:	42a6      	cmp	r6, r4
 8002b60:	d105      	bne.n	8002b6e <__libc_init_array+0x2e>
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b68:	4798      	blx	r3
 8002b6a:	3601      	adds	r6, #1
 8002b6c:	e7ee      	b.n	8002b4c <__libc_init_array+0xc>
 8002b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b72:	4798      	blx	r3
 8002b74:	3601      	adds	r6, #1
 8002b76:	e7f2      	b.n	8002b5e <__libc_init_array+0x1e>
 8002b78:	08002d7c 	.word	0x08002d7c
 8002b7c:	08002d7c 	.word	0x08002d7c
 8002b80:	08002d7c 	.word	0x08002d7c
 8002b84:	08002d80 	.word	0x08002d80

08002b88 <malloc>:
 8002b88:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <malloc+0xc>)
 8002b8a:	4601      	mov	r1, r0
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	f000 b85f 	b.w	8002c50 <_malloc_r>
 8002b92:	bf00      	nop
 8002b94:	2000001c 	.word	0x2000001c

08002b98 <free>:
 8002b98:	4b02      	ldr	r3, [pc, #8]	; (8002ba4 <free+0xc>)
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	f000 b80b 	b.w	8002bb8 <_free_r>
 8002ba2:	bf00      	nop
 8002ba4:	2000001c 	.word	0x2000001c

08002ba8 <memset>:
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4402      	add	r2, r0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d100      	bne.n	8002bb2 <memset+0xa>
 8002bb0:	4770      	bx	lr
 8002bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb6:	e7f9      	b.n	8002bac <memset+0x4>

08002bb8 <_free_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4605      	mov	r5, r0
 8002bbc:	2900      	cmp	r1, #0
 8002bbe:	d043      	beq.n	8002c48 <_free_r+0x90>
 8002bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc4:	1f0c      	subs	r4, r1, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bfb8      	it	lt
 8002bca:	18e4      	addlt	r4, r4, r3
 8002bcc:	f000 f8aa 	bl	8002d24 <__malloc_lock>
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <_free_r+0x94>)
 8002bd2:	6813      	ldr	r3, [r2, #0]
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	b933      	cbnz	r3, 8002be6 <_free_r+0x2e>
 8002bd8:	6063      	str	r3, [r4, #4]
 8002bda:	6014      	str	r4, [r2, #0]
 8002bdc:	4628      	mov	r0, r5
 8002bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be2:	f000 b8a5 	b.w	8002d30 <__malloc_unlock>
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	d90a      	bls.n	8002c00 <_free_r+0x48>
 8002bea:	6821      	ldr	r1, [r4, #0]
 8002bec:	1862      	adds	r2, r4, r1
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	bf01      	itttt	eq
 8002bf2:	681a      	ldreq	r2, [r3, #0]
 8002bf4:	685b      	ldreq	r3, [r3, #4]
 8002bf6:	1852      	addeq	r2, r2, r1
 8002bf8:	6022      	streq	r2, [r4, #0]
 8002bfa:	6063      	str	r3, [r4, #4]
 8002bfc:	6004      	str	r4, [r0, #0]
 8002bfe:	e7ed      	b.n	8002bdc <_free_r+0x24>
 8002c00:	461a      	mov	r2, r3
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	b10b      	cbz	r3, 8002c0a <_free_r+0x52>
 8002c06:	42a3      	cmp	r3, r4
 8002c08:	d9fa      	bls.n	8002c00 <_free_r+0x48>
 8002c0a:	6811      	ldr	r1, [r2, #0]
 8002c0c:	1850      	adds	r0, r2, r1
 8002c0e:	42a0      	cmp	r0, r4
 8002c10:	d10b      	bne.n	8002c2a <_free_r+0x72>
 8002c12:	6820      	ldr	r0, [r4, #0]
 8002c14:	4401      	add	r1, r0
 8002c16:	1850      	adds	r0, r2, r1
 8002c18:	4283      	cmp	r3, r0
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	d1de      	bne.n	8002bdc <_free_r+0x24>
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4401      	add	r1, r0
 8002c24:	6011      	str	r1, [r2, #0]
 8002c26:	6053      	str	r3, [r2, #4]
 8002c28:	e7d8      	b.n	8002bdc <_free_r+0x24>
 8002c2a:	d902      	bls.n	8002c32 <_free_r+0x7a>
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	602b      	str	r3, [r5, #0]
 8002c30:	e7d4      	b.n	8002bdc <_free_r+0x24>
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1821      	adds	r1, r4, r0
 8002c36:	428b      	cmp	r3, r1
 8002c38:	bf01      	itttt	eq
 8002c3a:	6819      	ldreq	r1, [r3, #0]
 8002c3c:	685b      	ldreq	r3, [r3, #4]
 8002c3e:	1809      	addeq	r1, r1, r0
 8002c40:	6021      	streq	r1, [r4, #0]
 8002c42:	6063      	str	r3, [r4, #4]
 8002c44:	6054      	str	r4, [r2, #4]
 8002c46:	e7c9      	b.n	8002bdc <_free_r+0x24>
 8002c48:	bd38      	pop	{r3, r4, r5, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200000e0 	.word	0x200000e0

08002c50 <_malloc_r>:
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	1ccd      	adds	r5, r1, #3
 8002c54:	f025 0503 	bic.w	r5, r5, #3
 8002c58:	3508      	adds	r5, #8
 8002c5a:	2d0c      	cmp	r5, #12
 8002c5c:	bf38      	it	cc
 8002c5e:	250c      	movcc	r5, #12
 8002c60:	2d00      	cmp	r5, #0
 8002c62:	4606      	mov	r6, r0
 8002c64:	db01      	blt.n	8002c6a <_malloc_r+0x1a>
 8002c66:	42a9      	cmp	r1, r5
 8002c68:	d903      	bls.n	8002c72 <_malloc_r+0x22>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	6033      	str	r3, [r6, #0]
 8002c6e:	2000      	movs	r0, #0
 8002c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c72:	f000 f857 	bl	8002d24 <__malloc_lock>
 8002c76:	4921      	ldr	r1, [pc, #132]	; (8002cfc <_malloc_r+0xac>)
 8002c78:	680a      	ldr	r2, [r1, #0]
 8002c7a:	4614      	mov	r4, r2
 8002c7c:	b99c      	cbnz	r4, 8002ca6 <_malloc_r+0x56>
 8002c7e:	4f20      	ldr	r7, [pc, #128]	; (8002d00 <_malloc_r+0xb0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b923      	cbnz	r3, 8002c8e <_malloc_r+0x3e>
 8002c84:	4621      	mov	r1, r4
 8002c86:	4630      	mov	r0, r6
 8002c88:	f000 f83c 	bl	8002d04 <_sbrk_r>
 8002c8c:	6038      	str	r0, [r7, #0]
 8002c8e:	4629      	mov	r1, r5
 8002c90:	4630      	mov	r0, r6
 8002c92:	f000 f837 	bl	8002d04 <_sbrk_r>
 8002c96:	1c43      	adds	r3, r0, #1
 8002c98:	d123      	bne.n	8002ce2 <_malloc_r+0x92>
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	4630      	mov	r0, r6
 8002c9e:	6033      	str	r3, [r6, #0]
 8002ca0:	f000 f846 	bl	8002d30 <__malloc_unlock>
 8002ca4:	e7e3      	b.n	8002c6e <_malloc_r+0x1e>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	1b5b      	subs	r3, r3, r5
 8002caa:	d417      	bmi.n	8002cdc <_malloc_r+0x8c>
 8002cac:	2b0b      	cmp	r3, #11
 8002cae:	d903      	bls.n	8002cb8 <_malloc_r+0x68>
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	441c      	add	r4, r3
 8002cb4:	6025      	str	r5, [r4, #0]
 8002cb6:	e004      	b.n	8002cc2 <_malloc_r+0x72>
 8002cb8:	6863      	ldr	r3, [r4, #4]
 8002cba:	42a2      	cmp	r2, r4
 8002cbc:	bf0c      	ite	eq
 8002cbe:	600b      	streq	r3, [r1, #0]
 8002cc0:	6053      	strne	r3, [r2, #4]
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f000 f834 	bl	8002d30 <__malloc_unlock>
 8002cc8:	f104 000b 	add.w	r0, r4, #11
 8002ccc:	1d23      	adds	r3, r4, #4
 8002cce:	f020 0007 	bic.w	r0, r0, #7
 8002cd2:	1ac2      	subs	r2, r0, r3
 8002cd4:	d0cc      	beq.n	8002c70 <_malloc_r+0x20>
 8002cd6:	1a1b      	subs	r3, r3, r0
 8002cd8:	50a3      	str	r3, [r4, r2]
 8002cda:	e7c9      	b.n	8002c70 <_malloc_r+0x20>
 8002cdc:	4622      	mov	r2, r4
 8002cde:	6864      	ldr	r4, [r4, #4]
 8002ce0:	e7cc      	b.n	8002c7c <_malloc_r+0x2c>
 8002ce2:	1cc4      	adds	r4, r0, #3
 8002ce4:	f024 0403 	bic.w	r4, r4, #3
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d0e3      	beq.n	8002cb4 <_malloc_r+0x64>
 8002cec:	1a21      	subs	r1, r4, r0
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f000 f808 	bl	8002d04 <_sbrk_r>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d1dd      	bne.n	8002cb4 <_malloc_r+0x64>
 8002cf8:	e7cf      	b.n	8002c9a <_malloc_r+0x4a>
 8002cfa:	bf00      	nop
 8002cfc:	200000e0 	.word	0x200000e0
 8002d00:	200000e4 	.word	0x200000e4

08002d04 <_sbrk_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	2300      	movs	r3, #0
 8002d08:	4d05      	ldr	r5, [pc, #20]	; (8002d20 <_sbrk_r+0x1c>)
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	f7fe face 	bl	80012b0 <_sbrk>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_sbrk_r+0x1a>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_sbrk_r+0x1a>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	200001e0 	.word	0x200001e0

08002d24 <__malloc_lock>:
 8002d24:	4801      	ldr	r0, [pc, #4]	; (8002d2c <__malloc_lock+0x8>)
 8002d26:	f000 b809 	b.w	8002d3c <__retarget_lock_acquire_recursive>
 8002d2a:	bf00      	nop
 8002d2c:	200001e8 	.word	0x200001e8

08002d30 <__malloc_unlock>:
 8002d30:	4801      	ldr	r0, [pc, #4]	; (8002d38 <__malloc_unlock+0x8>)
 8002d32:	f000 b804 	b.w	8002d3e <__retarget_lock_release_recursive>
 8002d36:	bf00      	nop
 8002d38:	200001e8 	.word	0x200001e8

08002d3c <__retarget_lock_acquire_recursive>:
 8002d3c:	4770      	bx	lr

08002d3e <__retarget_lock_release_recursive>:
 8002d3e:	4770      	bx	lr

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
